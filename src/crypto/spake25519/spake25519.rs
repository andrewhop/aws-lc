#![allow(
    dead_code,
    mutable_transmutes,
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    unused_assignments,
    unused_mut
)]
#![feature(label_break_value)]
extern "C" {
    fn CBS_init(cbs: *mut CBS, data: *const uint8_t, len: size_t);
    fn CBS_stow(
        cbs: *const CBS,
        out_ptr: *mut *mut uint8_t,
        out_len: *mut size_t,
    ) -> libc::c_int;
    fn RAND_bytes(buf: *mut uint8_t, len: size_t) -> libc::c_int;
    fn SHA512_Init(sha: *mut SHA512_CTX) -> libc::c_int;
    fn SHA512_Update(
        sha: *mut SHA512_CTX,
        data: *const libc::c_void,
        len: size_t,
    ) -> libc::c_int;
    fn SHA512_Final(out: *mut uint8_t, sha: *mut SHA512_CTX) -> libc::c_int;
    fn SHA512(data: *const uint8_t, len: size_t, out: *mut uint8_t) -> *mut uint8_t;
    fn __assert_fail(
        __assertion: *const libc::c_char,
        __file: *const libc::c_char,
        __line: libc::c_uint,
        __function: *const libc::c_char,
    ) -> !;
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn memset(
        _: *mut libc::c_void,
        _: libc::c_int,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn OPENSSL_zalloc(size: size_t) -> *mut libc::c_void;
    fn OPENSSL_free(ptr: *mut libc::c_void);
    fn OPENSSL_cleanse(ptr: *mut libc::c_void, len: size_t);
    fn bn_select_words(
        r: *mut BN_ULONG,
        mask: BN_ULONG,
        a: *const BN_ULONG,
        b: *const BN_ULONG,
        num: size_t,
    );
    fn bn_add_words(
        rp: *mut BN_ULONG,
        ap: *const BN_ULONG,
        bp: *const BN_ULONG,
        num: size_t,
    ) -> BN_ULONG;
    fn bn_little_endian_to_words(
        out: *mut BN_ULONG,
        out_len: size_t,
        in_0: *const uint8_t,
        in_len: size_t,
    );
    fn bn_words_to_little_endian(
        out: *mut uint8_t,
        out_len: size_t,
        in_0: *const BN_ULONG,
        in_len: size_t,
    );
    fn x25519_ge_tobytes(s: *mut uint8_t, h: *const ge_p2);
    fn x25519_ge_frombytes_vartime(h: *mut ge_p3, s: *const uint8_t) -> libc::c_int;
    fn x25519_ge_p3_to_cached(r: *mut ge_cached, p: *const ge_p3);
    fn x25519_ge_p1p1_to_p2(r: *mut ge_p2, p: *const ge_p1p1);
    fn x25519_ge_p1p1_to_p3(r: *mut ge_p3, p: *const ge_p1p1);
    fn x25519_ge_add(r: *mut ge_p1p1, p: *const ge_p3, q: *const ge_cached);
    fn x25519_ge_sub(r: *mut ge_p1p1, p: *const ge_p3, q: *const ge_cached);
    fn x25519_ge_scalarmult_small_precomp(
        h: *mut ge_p3,
        a: *const uint8_t,
        precomp_table: *const uint8_t,
    );
    fn x25519_ge_scalarmult_base(h: *mut ge_p3, a: *const uint8_t);
    fn x25519_ge_scalarmult(r: *mut ge_p2, scalar: *const uint8_t, A: *const ge_p3);
    fn x25519_sc_reduce(s: *mut uint8_t);
}
pub type size_t = libc::c_ulong;
pub type __uint8_t = libc::c_uchar;
pub type __uint64_t = libc::c_ulong;
pub type uint8_t = __uint8_t;
pub type uint64_t = __uint64_t;
pub type BN_ULONG = uint64_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct cbs_st {
    pub data: *const uint8_t,
    pub len: size_t,
}
pub type CBS = cbs_st;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct sha512_state_st {
    pub h: [uint64_t; 8],
    pub Nl: uint64_t,
    pub Nh: uint64_t,
    pub p: [uint8_t; 128],
    pub num: libc::c_uint,
    pub md_len: libc::c_uint,
}
pub type SHA512_CTX = sha512_state_st;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct spake2_ctx_st {
    pub private_key: [uint8_t; 32],
    pub my_msg: [uint8_t; 32],
    pub password_scalar: [uint8_t; 32],
    pub password_hash: [uint8_t; 64],
    pub my_name: *mut uint8_t,
    pub my_name_len: size_t,
    pub their_name: *mut uint8_t,
    pub their_name_len: size_t,
    pub my_role: spake2_role_t,
    pub state: spake2_state_t,
    pub disable_password_scalar_hack: libc::c_char,
}
pub type spake2_state_t = libc::c_uint;
pub const spake2_state_key_generated: spake2_state_t = 2;
pub const spake2_state_msg_generated: spake2_state_t = 1;
pub const spake2_state_init: spake2_state_t = 0;
pub type spake2_role_t = libc::c_uint;
pub const spake2_role_bob: spake2_role_t = 1;
pub const spake2_role_alice: spake2_role_t = 0;
pub type SPAKE2_CTX = spake2_ctx_st;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ge_p2 {
    pub X: fe,
    pub Y: fe,
    pub Z: fe,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct fe {
    pub v: [uint64_t; 5],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ge_p1p1 {
    pub X: fe_loose,
    pub Y: fe_loose,
    pub Z: fe_loose,
    pub T: fe_loose,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct fe_loose {
    pub v: [uint64_t; 5],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ge_cached {
    pub YplusX: fe_loose,
    pub YminusX: fe_loose,
    pub Z: fe_loose,
    pub T2d: fe_loose,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ge_p3 {
    pub X: fe,
    pub Y: fe,
    pub Z: fe,
    pub T: fe,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct scalar {
    pub words: [BN_ULONG; 4],
}
pub type crypto_word_t = uint64_t;
#[inline]
unsafe extern "C" fn constant_time_msb_w(mut a: crypto_word_t) -> crypto_word_t {
    return (0 as libc::c_uint as crypto_word_t)
        .wrapping_sub(
            a
                >> (::core::mem::size_of::<crypto_word_t>() as libc::c_ulong)
                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong),
        );
}
#[inline]
unsafe extern "C" fn constant_time_is_zero_w(mut a: crypto_word_t) -> crypto_word_t {
    return constant_time_msb_w(!a & a.wrapping_sub(1 as libc::c_int as crypto_word_t));
}
#[inline]
unsafe extern "C" fn constant_time_eq_w(
    mut a: crypto_word_t,
    mut b: crypto_word_t,
) -> crypto_word_t {
    return constant_time_is_zero_w(a ^ b);
}
#[inline]
unsafe extern "C" fn OPENSSL_memcpy(
    mut dst: *mut libc::c_void,
    mut src: *const libc::c_void,
    mut n: size_t,
) -> *mut libc::c_void {
    if n == 0 as libc::c_int as size_t {
        return dst;
    }
    return memcpy(dst, src, n);
}
#[inline]
unsafe extern "C" fn OPENSSL_memset(
    mut dst: *mut libc::c_void,
    mut c: libc::c_int,
    mut n: size_t,
) -> *mut libc::c_void {
    if n == 0 as libc::c_int as size_t {
        return dst;
    }
    return memset(dst, c, n);
}
static mut kSpakeNSmallPrecomp: [uint8_t; 960] = [
    0x20 as libc::c_int as uint8_t,
    0x1b as libc::c_int as uint8_t,
    0xc5 as libc::c_int as uint8_t,
    0xb3 as libc::c_int as uint8_t,
    0x43 as libc::c_int as uint8_t,
    0x17 as libc::c_int as uint8_t,
    0x71 as libc::c_int as uint8_t,
    0x10 as libc::c_int as uint8_t,
    0x44 as libc::c_int as uint8_t,
    0x1e as libc::c_int as uint8_t,
    0x73 as libc::c_int as uint8_t,
    0xb3 as libc::c_int as uint8_t,
    0xae as libc::c_int as uint8_t,
    0x3f as libc::c_int as uint8_t,
    0xbf as libc::c_int as uint8_t,
    0x9f as libc::c_int as uint8_t,
    0xf5 as libc::c_int as uint8_t,
    0x44 as libc::c_int as uint8_t,
    0xc8 as libc::c_int as uint8_t,
    0x13 as libc::c_int as uint8_t,
    0x8f as libc::c_int as uint8_t,
    0xd1 as libc::c_int as uint8_t,
    0x1 as libc::c_int as uint8_t,
    0xc2 as libc::c_int as uint8_t,
    0x8a as libc::c_int as uint8_t,
    0x1a as libc::c_int as uint8_t,
    0x6d as libc::c_int as uint8_t,
    0xea as libc::c_int as uint8_t,
    0x4d as libc::c_int as uint8_t,
    0 as libc::c_int as uint8_t,
    0x5d as libc::c_int as uint8_t,
    0x6e as libc::c_int as uint8_t,
    0x10 as libc::c_int as uint8_t,
    0xe3 as libc::c_int as uint8_t,
    0xdf as libc::c_int as uint8_t,
    0xa as libc::c_int as uint8_t,
    0xe3 as libc::c_int as uint8_t,
    0x7d as libc::c_int as uint8_t,
    0x8e as libc::c_int as uint8_t,
    0x7a as libc::c_int as uint8_t,
    0x99 as libc::c_int as uint8_t,
    0xb5 as libc::c_int as uint8_t,
    0xfe as libc::c_int as uint8_t,
    0x74 as libc::c_int as uint8_t,
    0xb4 as libc::c_int as uint8_t,
    0x46 as libc::c_int as uint8_t,
    0x72 as libc::c_int as uint8_t,
    0x10 as libc::c_int as uint8_t,
    0x3d as libc::c_int as uint8_t,
    0xbd as libc::c_int as uint8_t,
    0xdc as libc::c_int as uint8_t,
    0xbd as libc::c_int as uint8_t,
    0x6 as libc::c_int as uint8_t,
    0xaf as libc::c_int as uint8_t,
    0x68 as libc::c_int as uint8_t,
    0xd as libc::c_int as uint8_t,
    0x71 as libc::c_int as uint8_t,
    0x32 as libc::c_int as uint8_t,
    0x9a as libc::c_int as uint8_t,
    0x11 as libc::c_int as uint8_t,
    0x69 as libc::c_int as uint8_t,
    0x3b as libc::c_int as uint8_t,
    0xc7 as libc::c_int as uint8_t,
    0x78 as libc::c_int as uint8_t,
    0x93 as libc::c_int as uint8_t,
    0xf1 as libc::c_int as uint8_t,
    0x57 as libc::c_int as uint8_t,
    0x97 as libc::c_int as uint8_t,
    0x6e as libc::c_int as uint8_t,
    0xf0 as libc::c_int as uint8_t,
    0x6e as libc::c_int as uint8_t,
    0x45 as libc::c_int as uint8_t,
    0x37 as libc::c_int as uint8_t,
    0x4a as libc::c_int as uint8_t,
    0xf4 as libc::c_int as uint8_t,
    0xb as libc::c_int as uint8_t,
    0x18 as libc::c_int as uint8_t,
    0x51 as libc::c_int as uint8_t,
    0xf5 as libc::c_int as uint8_t,
    0x4f as libc::c_int as uint8_t,
    0x67 as libc::c_int as uint8_t,
    0x3c as libc::c_int as uint8_t,
    0xdc as libc::c_int as uint8_t,
    0xec as libc::c_int as uint8_t,
    0x84 as libc::c_int as uint8_t,
    0xed as libc::c_int as uint8_t,
    0xd0 as libc::c_int as uint8_t,
    0xeb as libc::c_int as uint8_t,
    0xca as libc::c_int as uint8_t,
    0xfb as libc::c_int as uint8_t,
    0xdb as libc::c_int as uint8_t,
    0xff as libc::c_int as uint8_t,
    0x7f as libc::c_int as uint8_t,
    0xeb as libc::c_int as uint8_t,
    0xa8 as libc::c_int as uint8_t,
    0x23 as libc::c_int as uint8_t,
    0x68 as libc::c_int as uint8_t,
    0x87 as libc::c_int as uint8_t,
    0x13 as libc::c_int as uint8_t,
    0x64 as libc::c_int as uint8_t,
    0x6a as libc::c_int as uint8_t,
    0x10 as libc::c_int as uint8_t,
    0xf7 as libc::c_int as uint8_t,
    0x45 as libc::c_int as uint8_t,
    0xe0 as libc::c_int as uint8_t,
    0xf as libc::c_int as uint8_t,
    0x32 as libc::c_int as uint8_t,
    0x21 as libc::c_int as uint8_t,
    0x59 as libc::c_int as uint8_t,
    0x7c as libc::c_int as uint8_t,
    0xe as libc::c_int as uint8_t,
    0x50 as libc::c_int as uint8_t,
    0xad as libc::c_int as uint8_t,
    0x56 as libc::c_int as uint8_t,
    0xd7 as libc::c_int as uint8_t,
    0x12 as libc::c_int as uint8_t,
    0x69 as libc::c_int as uint8_t,
    0x7b as libc::c_int as uint8_t,
    0x58 as libc::c_int as uint8_t,
    0xf8 as libc::c_int as uint8_t,
    0xb9 as libc::c_int as uint8_t,
    0x3b as libc::c_int as uint8_t,
    0xa5 as libc::c_int as uint8_t,
    0xbb as libc::c_int as uint8_t,
    0x4d as libc::c_int as uint8_t,
    0x1b as libc::c_int as uint8_t,
    0x87 as libc::c_int as uint8_t,
    0x1c as libc::c_int as uint8_t,
    0x46 as libc::c_int as uint8_t,
    0xa7 as libc::c_int as uint8_t,
    0x17 as libc::c_int as uint8_t,
    0x9d as libc::c_int as uint8_t,
    0x6d as libc::c_int as uint8_t,
    0x84 as libc::c_int as uint8_t,
    0x45 as libc::c_int as uint8_t,
    0xbe as libc::c_int as uint8_t,
    0x7f as libc::c_int as uint8_t,
    0x95 as libc::c_int as uint8_t,
    0xd2 as libc::c_int as uint8_t,
    0x34 as libc::c_int as uint8_t,
    0xcd as libc::c_int as uint8_t,
    0x89 as libc::c_int as uint8_t,
    0x95 as libc::c_int as uint8_t,
    0xc0 as libc::c_int as uint8_t,
    0xf0 as libc::c_int as uint8_t,
    0xd3 as libc::c_int as uint8_t,
    0xdf as libc::c_int as uint8_t,
    0x6e as libc::c_int as uint8_t,
    0x10 as libc::c_int as uint8_t,
    0x4a as libc::c_int as uint8_t,
    0xe3 as libc::c_int as uint8_t,
    0x7b as libc::c_int as uint8_t,
    0xce as libc::c_int as uint8_t,
    0x7f as libc::c_int as uint8_t,
    0x40 as libc::c_int as uint8_t,
    0x27 as libc::c_int as uint8_t,
    0xc7 as libc::c_int as uint8_t,
    0x2b as libc::c_int as uint8_t,
    0xab as libc::c_int as uint8_t,
    0x66 as libc::c_int as uint8_t,
    0x3 as libc::c_int as uint8_t,
    0x59 as libc::c_int as uint8_t,
    0xb4 as libc::c_int as uint8_t,
    0x7b as libc::c_int as uint8_t,
    0xc7 as libc::c_int as uint8_t,
    0xc7 as libc::c_int as uint8_t,
    0xf0 as libc::c_int as uint8_t,
    0x39 as libc::c_int as uint8_t,
    0x9a as libc::c_int as uint8_t,
    0x33 as libc::c_int as uint8_t,
    0x35 as libc::c_int as uint8_t,
    0xbf as libc::c_int as uint8_t,
    0xcc as libc::c_int as uint8_t,
    0x2f as libc::c_int as uint8_t,
    0xf3 as libc::c_int as uint8_t,
    0x2e as libc::c_int as uint8_t,
    0x68 as libc::c_int as uint8_t,
    0x9d as libc::c_int as uint8_t,
    0x53 as libc::c_int as uint8_t,
    0x5c as libc::c_int as uint8_t,
    0x88 as libc::c_int as uint8_t,
    0x52 as libc::c_int as uint8_t,
    0xe3 as libc::c_int as uint8_t,
    0x77 as libc::c_int as uint8_t,
    0x90 as libc::c_int as uint8_t,
    0xa1 as libc::c_int as uint8_t,
    0x27 as libc::c_int as uint8_t,
    0x85 as libc::c_int as uint8_t,
    0xc5 as libc::c_int as uint8_t,
    0x74 as libc::c_int as uint8_t,
    0x7f as libc::c_int as uint8_t,
    0x23 as libc::c_int as uint8_t,
    0xe as libc::c_int as uint8_t,
    0x93 as libc::c_int as uint8_t,
    0x1 as libc::c_int as uint8_t,
    0x3e as libc::c_int as uint8_t,
    0xe7 as libc::c_int as uint8_t,
    0x2e as libc::c_int as uint8_t,
    0x2e as libc::c_int as uint8_t,
    0x95 as libc::c_int as uint8_t,
    0xf3 as libc::c_int as uint8_t,
    0xd as libc::c_int as uint8_t,
    0xc2 as libc::c_int as uint8_t,
    0x25 as libc::c_int as uint8_t,
    0x25 as libc::c_int as uint8_t,
    0x39 as libc::c_int as uint8_t,
    0x39 as libc::c_int as uint8_t,
    0x3d as libc::c_int as uint8_t,
    0x6e as libc::c_int as uint8_t,
    0x8e as libc::c_int as uint8_t,
    0x89 as libc::c_int as uint8_t,
    0xbd as libc::c_int as uint8_t,
    0xe8 as libc::c_int as uint8_t,
    0xbb as libc::c_int as uint8_t,
    0x67 as libc::c_int as uint8_t,
    0x5e as libc::c_int as uint8_t,
    0x8c as libc::c_int as uint8_t,
    0x66 as libc::c_int as uint8_t,
    0x8b as libc::c_int as uint8_t,
    0x63 as libc::c_int as uint8_t,
    0x28 as libc::c_int as uint8_t,
    0x1e as libc::c_int as uint8_t,
    0x4e as libc::c_int as uint8_t,
    0x74 as libc::c_int as uint8_t,
    0x85 as libc::c_int as uint8_t,
    0xa8 as libc::c_int as uint8_t,
    0xaf as libc::c_int as uint8_t,
    0xf as libc::c_int as uint8_t,
    0x12 as libc::c_int as uint8_t,
    0x5d as libc::c_int as uint8_t,
    0xb6 as libc::c_int as uint8_t,
    0x8a as libc::c_int as uint8_t,
    0x83 as libc::c_int as uint8_t,
    0x1a as libc::c_int as uint8_t,
    0x77 as libc::c_int as uint8_t,
    0x76 as libc::c_int as uint8_t,
    0x5e as libc::c_int as uint8_t,
    0x62 as libc::c_int as uint8_t,
    0x8a as libc::c_int as uint8_t,
    0xa7 as libc::c_int as uint8_t,
    0x3c as libc::c_int as uint8_t,
    0xb8 as libc::c_int as uint8_t,
    0x5 as libc::c_int as uint8_t,
    0x57 as libc::c_int as uint8_t,
    0x2b as libc::c_int as uint8_t,
    0xaf as libc::c_int as uint8_t,
    0x36 as libc::c_int as uint8_t,
    0x2e as libc::c_int as uint8_t,
    0x10 as libc::c_int as uint8_t,
    0x90 as libc::c_int as uint8_t,
    0xb2 as libc::c_int as uint8_t,
    0x39 as libc::c_int as uint8_t,
    0xb4 as libc::c_int as uint8_t,
    0x3e as libc::c_int as uint8_t,
    0x75 as libc::c_int as uint8_t,
    0x6d as libc::c_int as uint8_t,
    0x3a as libc::c_int as uint8_t,
    0xa8 as libc::c_int as uint8_t,
    0x31 as libc::c_int as uint8_t,
    0x35 as libc::c_int as uint8_t,
    0xc2 as libc::c_int as uint8_t,
    0x1e as libc::c_int as uint8_t,
    0x8f as libc::c_int as uint8_t,
    0xc2 as libc::c_int as uint8_t,
    0x79 as libc::c_int as uint8_t,
    0x89 as libc::c_int as uint8_t,
    0x35 as libc::c_int as uint8_t,
    0x16 as libc::c_int as uint8_t,
    0x26 as libc::c_int as uint8_t,
    0xd1 as libc::c_int as uint8_t,
    0xc7 as libc::c_int as uint8_t,
    0xb as libc::c_int as uint8_t,
    0x4 as libc::c_int as uint8_t,
    0x1f as libc::c_int as uint8_t,
    0x1d as libc::c_int as uint8_t,
    0xf9 as libc::c_int as uint8_t,
    0x9c as libc::c_int as uint8_t,
    0x5 as libc::c_int as uint8_t,
    0xa6 as libc::c_int as uint8_t,
    0x6b as libc::c_int as uint8_t,
    0xb5 as libc::c_int as uint8_t,
    0x19 as libc::c_int as uint8_t,
    0x5a as libc::c_int as uint8_t,
    0x24 as libc::c_int as uint8_t,
    0x6d as libc::c_int as uint8_t,
    0x91 as libc::c_int as uint8_t,
    0xc5 as libc::c_int as uint8_t,
    0x31 as libc::c_int as uint8_t,
    0xfd as libc::c_int as uint8_t,
    0xc5 as libc::c_int as uint8_t,
    0xfa as libc::c_int as uint8_t,
    0xe7 as libc::c_int as uint8_t,
    0xa6 as libc::c_int as uint8_t,
    0xcb as libc::c_int as uint8_t,
    0xe as libc::c_int as uint8_t,
    0x4b as libc::c_int as uint8_t,
    0x18 as libc::c_int as uint8_t,
    0xd as libc::c_int as uint8_t,
    0x94 as libc::c_int as uint8_t,
    0xc7 as libc::c_int as uint8_t,
    0xee as libc::c_int as uint8_t,
    0x1d as libc::c_int as uint8_t,
    0x46 as libc::c_int as uint8_t,
    0x1f as libc::c_int as uint8_t,
    0x92 as libc::c_int as uint8_t,
    0xb1 as libc::c_int as uint8_t,
    0xb2 as libc::c_int as uint8_t,
    0x4a as libc::c_int as uint8_t,
    0x2b as libc::c_int as uint8_t,
    0x43 as libc::c_int as uint8_t,
    0x37 as libc::c_int as uint8_t,
    0xfe as libc::c_int as uint8_t,
    0xc2 as libc::c_int as uint8_t,
    0x15 as libc::c_int as uint8_t,
    0x11 as libc::c_int as uint8_t,
    0x89 as libc::c_int as uint8_t,
    0xef as libc::c_int as uint8_t,
    0x59 as libc::c_int as uint8_t,
    0x73 as libc::c_int as uint8_t,
    0x3c as libc::c_int as uint8_t,
    0x6 as libc::c_int as uint8_t,
    0x76 as libc::c_int as uint8_t,
    0x78 as libc::c_int as uint8_t,
    0xcb as libc::c_int as uint8_t,
    0xa6 as libc::c_int as uint8_t,
    0xd as libc::c_int as uint8_t,
    0x79 as libc::c_int as uint8_t,
    0x5f as libc::c_int as uint8_t,
    0x28 as libc::c_int as uint8_t,
    0xb as libc::c_int as uint8_t,
    0x5b as libc::c_int as uint8_t,
    0x8c as libc::c_int as uint8_t,
    0x9e as libc::c_int as uint8_t,
    0xe4 as libc::c_int as uint8_t,
    0xaa as libc::c_int as uint8_t,
    0x51 as libc::c_int as uint8_t,
    0x9a as libc::c_int as uint8_t,
    0x42 as libc::c_int as uint8_t,
    0x6f as libc::c_int as uint8_t,
    0x11 as libc::c_int as uint8_t,
    0x50 as libc::c_int as uint8_t,
    0x3d as libc::c_int as uint8_t,
    0x1 as libc::c_int as uint8_t,
    0xd6 as libc::c_int as uint8_t,
    0x21 as libc::c_int as uint8_t,
    0xc0 as libc::c_int as uint8_t,
    0x99 as libc::c_int as uint8_t,
    0x5e as libc::c_int as uint8_t,
    0x1a as libc::c_int as uint8_t,
    0xe8 as libc::c_int as uint8_t,
    0x81 as libc::c_int as uint8_t,
    0x25 as libc::c_int as uint8_t,
    0x80 as libc::c_int as uint8_t,
    0xeb as libc::c_int as uint8_t,
    0xed as libc::c_int as uint8_t,
    0x5d as libc::c_int as uint8_t,
    0x37 as libc::c_int as uint8_t,
    0x47 as libc::c_int as uint8_t,
    0x30 as libc::c_int as uint8_t,
    0x70 as libc::c_int as uint8_t,
    0xa0 as libc::c_int as uint8_t,
    0x4e as libc::c_int as uint8_t,
    0xb as libc::c_int as uint8_t,
    0x43 as libc::c_int as uint8_t,
    0x17 as libc::c_int as uint8_t,
    0xbe as libc::c_int as uint8_t,
    0xb6 as libc::c_int as uint8_t,
    0x47 as libc::c_int as uint8_t,
    0xe7 as libc::c_int as uint8_t,
    0x2a as libc::c_int as uint8_t,
    0x62 as libc::c_int as uint8_t,
    0x9d as libc::c_int as uint8_t,
    0x5d as libc::c_int as uint8_t,
    0xa6 as libc::c_int as uint8_t,
    0xc5 as libc::c_int as uint8_t,
    0x33 as libc::c_int as uint8_t,
    0x62 as libc::c_int as uint8_t,
    0x9d as libc::c_int as uint8_t,
    0x56 as libc::c_int as uint8_t,
    0x24 as libc::c_int as uint8_t,
    0x9d as libc::c_int as uint8_t,
    0x1d as libc::c_int as uint8_t,
    0xb2 as libc::c_int as uint8_t,
    0x13 as libc::c_int as uint8_t,
    0xbc as libc::c_int as uint8_t,
    0x17 as libc::c_int as uint8_t,
    0x66 as libc::c_int as uint8_t,
    0x43 as libc::c_int as uint8_t,
    0xd1 as libc::c_int as uint8_t,
    0x68 as libc::c_int as uint8_t,
    0xd5 as libc::c_int as uint8_t,
    0x3b as libc::c_int as uint8_t,
    0x17 as libc::c_int as uint8_t,
    0x69 as libc::c_int as uint8_t,
    0x17 as libc::c_int as uint8_t,
    0xa6 as libc::c_int as uint8_t,
    0x6 as libc::c_int as uint8_t,
    0x9e as libc::c_int as uint8_t,
    0x12 as libc::c_int as uint8_t,
    0xb8 as libc::c_int as uint8_t,
    0x7c as libc::c_int as uint8_t,
    0xd5 as libc::c_int as uint8_t,
    0xaf as libc::c_int as uint8_t,
    0x3e as libc::c_int as uint8_t,
    0x21 as libc::c_int as uint8_t,
    0x1b as libc::c_int as uint8_t,
    0x31 as libc::c_int as uint8_t,
    0xeb as libc::c_int as uint8_t,
    0xb as libc::c_int as uint8_t,
    0xa4 as libc::c_int as uint8_t,
    0x98 as libc::c_int as uint8_t,
    0x1c as libc::c_int as uint8_t,
    0xf2 as libc::c_int as uint8_t,
    0x6a as libc::c_int as uint8_t,
    0x5e as libc::c_int as uint8_t,
    0x7c as libc::c_int as uint8_t,
    0x9b as libc::c_int as uint8_t,
    0x45 as libc::c_int as uint8_t,
    0x8f as libc::c_int as uint8_t,
    0xb2 as libc::c_int as uint8_t,
    0x12 as libc::c_int as uint8_t,
    0x6 as libc::c_int as uint8_t,
    0xd5 as libc::c_int as uint8_t,
    0x8c as libc::c_int as uint8_t,
    0x1d as libc::c_int as uint8_t,
    0xb2 as libc::c_int as uint8_t,
    0xa7 as libc::c_int as uint8_t,
    0x57 as libc::c_int as uint8_t,
    0x5f as libc::c_int as uint8_t,
    0x2f as libc::c_int as uint8_t,
    0x4f as libc::c_int as uint8_t,
    0xdb as libc::c_int as uint8_t,
    0x52 as libc::c_int as uint8_t,
    0x99 as libc::c_int as uint8_t,
    0x7c as libc::c_int as uint8_t,
    0x58 as libc::c_int as uint8_t,
    0x1 as libc::c_int as uint8_t,
    0x5f as libc::c_int as uint8_t,
    0xf2 as libc::c_int as uint8_t,
    0xa5 as libc::c_int as uint8_t,
    0xf6 as libc::c_int as uint8_t,
    0x51 as libc::c_int as uint8_t,
    0x86 as libc::c_int as uint8_t,
    0x21 as libc::c_int as uint8_t,
    0x2f as libc::c_int as uint8_t,
    0x5b as libc::c_int as uint8_t,
    0x8d as libc::c_int as uint8_t,
    0x6a as libc::c_int as uint8_t,
    0xae as libc::c_int as uint8_t,
    0x83 as libc::c_int as uint8_t,
    0x34 as libc::c_int as uint8_t,
    0x6d as libc::c_int as uint8_t,
    0x58 as libc::c_int as uint8_t,
    0x4b as libc::c_int as uint8_t,
    0xef as libc::c_int as uint8_t,
    0xfe as libc::c_int as uint8_t,
    0xbf as libc::c_int as uint8_t,
    0x73 as libc::c_int as uint8_t,
    0x5d as libc::c_int as uint8_t,
    0xdb as libc::c_int as uint8_t,
    0xc4 as libc::c_int as uint8_t,
    0x97 as libc::c_int as uint8_t,
    0x2a as libc::c_int as uint8_t,
    0x85 as libc::c_int as uint8_t,
    0xf3 as libc::c_int as uint8_t,
    0x6c as libc::c_int as uint8_t,
    0x46 as libc::c_int as uint8_t,
    0x42 as libc::c_int as uint8_t,
    0xb3 as libc::c_int as uint8_t,
    0x90 as libc::c_int as uint8_t,
    0xc1 as libc::c_int as uint8_t,
    0x57 as libc::c_int as uint8_t,
    0x97 as libc::c_int as uint8_t,
    0x50 as libc::c_int as uint8_t,
    0x35 as libc::c_int as uint8_t,
    0xb1 as libc::c_int as uint8_t,
    0x9d as libc::c_int as uint8_t,
    0xb7 as libc::c_int as uint8_t,
    0xc7 as libc::c_int as uint8_t,
    0x3c as libc::c_int as uint8_t,
    0x85 as libc::c_int as uint8_t,
    0x6d as libc::c_int as uint8_t,
    0x6c as libc::c_int as uint8_t,
    0xfd as libc::c_int as uint8_t,
    0xce as libc::c_int as uint8_t,
    0xb0 as libc::c_int as uint8_t,
    0xc9 as libc::c_int as uint8_t,
    0xa2 as libc::c_int as uint8_t,
    0x77 as libc::c_int as uint8_t,
    0xee as libc::c_int as uint8_t,
    0xc3 as libc::c_int as uint8_t,
    0x6b as libc::c_int as uint8_t,
    0xc as libc::c_int as uint8_t,
    0x37 as libc::c_int as uint8_t,
    0xfa as libc::c_int as uint8_t,
    0x30 as libc::c_int as uint8_t,
    0x91 as libc::c_int as uint8_t,
    0xd1 as libc::c_int as uint8_t,
    0x2c as libc::c_int as uint8_t,
    0xb8 as libc::c_int as uint8_t,
    0x5e as libc::c_int as uint8_t,
    0x7f as libc::c_int as uint8_t,
    0x81 as libc::c_int as uint8_t,
    0x5f as libc::c_int as uint8_t,
    0x87 as libc::c_int as uint8_t,
    0xfd as libc::c_int as uint8_t,
    0x18 as libc::c_int as uint8_t,
    0x2 as libc::c_int as uint8_t,
    0x5a as libc::c_int as uint8_t,
    0x30 as libc::c_int as uint8_t,
    0x4e as libc::c_int as uint8_t,
    0x62 as libc::c_int as uint8_t,
    0xbc as libc::c_int as uint8_t,
    0x65 as libc::c_int as uint8_t,
    0xc6 as libc::c_int as uint8_t,
    0xce as libc::c_int as uint8_t,
    0x1a as libc::c_int as uint8_t,
    0xcf as libc::c_int as uint8_t,
    0x2b as libc::c_int as uint8_t,
    0xaa as libc::c_int as uint8_t,
    0x56 as libc::c_int as uint8_t,
    0x3e as libc::c_int as uint8_t,
    0x4d as libc::c_int as uint8_t,
    0xcf as libc::c_int as uint8_t,
    0xba as libc::c_int as uint8_t,
    0x62 as libc::c_int as uint8_t,
    0x5f as libc::c_int as uint8_t,
    0x9a as libc::c_int as uint8_t,
    0xd0 as libc::c_int as uint8_t,
    0x72 as libc::c_int as uint8_t,
    0xff as libc::c_int as uint8_t,
    0xef as libc::c_int as uint8_t,
    0x28 as libc::c_int as uint8_t,
    0xbd as libc::c_int as uint8_t,
    0xbe as libc::c_int as uint8_t,
    0xd8 as libc::c_int as uint8_t,
    0x57 as libc::c_int as uint8_t,
    0x3d as libc::c_int as uint8_t,
    0xf5 as libc::c_int as uint8_t,
    0x57 as libc::c_int as uint8_t,
    0x7d as libc::c_int as uint8_t,
    0xe9 as libc::c_int as uint8_t,
    0x71 as libc::c_int as uint8_t,
    0x31 as libc::c_int as uint8_t,
    0xec as libc::c_int as uint8_t,
    0x98 as libc::c_int as uint8_t,
    0x90 as libc::c_int as uint8_t,
    0x94 as libc::c_int as uint8_t,
    0xd9 as libc::c_int as uint8_t,
    0x54 as libc::c_int as uint8_t,
    0xbf as libc::c_int as uint8_t,
    0x84 as libc::c_int as uint8_t,
    0xb as libc::c_int as uint8_t,
    0xe3 as libc::c_int as uint8_t,
    0x6 as libc::c_int as uint8_t,
    0x47 as libc::c_int as uint8_t,
    0x19 as libc::c_int as uint8_t,
    0x9a as libc::c_int as uint8_t,
    0x13 as libc::c_int as uint8_t,
    0x1d as libc::c_int as uint8_t,
    0xef as libc::c_int as uint8_t,
    0x9d as libc::c_int as uint8_t,
    0x13 as libc::c_int as uint8_t,
    0xf3 as libc::c_int as uint8_t,
    0xdb as libc::c_int as uint8_t,
    0xc3 as libc::c_int as uint8_t,
    0x5c as libc::c_int as uint8_t,
    0x72 as libc::c_int as uint8_t,
    0x9e as libc::c_int as uint8_t,
    0xed as libc::c_int as uint8_t,
    0x24 as libc::c_int as uint8_t,
    0xaa as libc::c_int as uint8_t,
    0x64 as libc::c_int as uint8_t,
    0xed as libc::c_int as uint8_t,
    0xe7 as libc::c_int as uint8_t,
    0xd as libc::c_int as uint8_t,
    0xa0 as libc::c_int as uint8_t,
    0x7c as libc::c_int as uint8_t,
    0x73 as libc::c_int as uint8_t,
    0xba as libc::c_int as uint8_t,
    0x9b as libc::c_int as uint8_t,
    0x86 as libc::c_int as uint8_t,
    0xa7 as libc::c_int as uint8_t,
    0x3b as libc::c_int as uint8_t,
    0x55 as libc::c_int as uint8_t,
    0xab as libc::c_int as uint8_t,
    0x58 as libc::c_int as uint8_t,
    0x30 as libc::c_int as uint8_t,
    0xf1 as libc::c_int as uint8_t,
    0x15 as libc::c_int as uint8_t,
    0x81 as libc::c_int as uint8_t,
    0x83 as libc::c_int as uint8_t,
    0x2f as libc::c_int as uint8_t,
    0xf9 as libc::c_int as uint8_t,
    0x62 as libc::c_int as uint8_t,
    0x84 as libc::c_int as uint8_t,
    0x98 as libc::c_int as uint8_t,
    0x66 as libc::c_int as uint8_t,
    0xf6 as libc::c_int as uint8_t,
    0x55 as libc::c_int as uint8_t,
    0x21 as libc::c_int as uint8_t,
    0xd8 as libc::c_int as uint8_t,
    0xf2 as libc::c_int as uint8_t,
    0x25 as libc::c_int as uint8_t,
    0x64 as libc::c_int as uint8_t,
    0x71 as libc::c_int as uint8_t,
    0x4b as libc::c_int as uint8_t,
    0x12 as libc::c_int as uint8_t,
    0x76 as libc::c_int as uint8_t,
    0x59 as libc::c_int as uint8_t,
    0xc5 as libc::c_int as uint8_t,
    0xaa as libc::c_int as uint8_t,
    0x93 as libc::c_int as uint8_t,
    0x67 as libc::c_int as uint8_t,
    0xc3 as libc::c_int as uint8_t,
    0x86 as libc::c_int as uint8_t,
    0x25 as libc::c_int as uint8_t,
    0xab as libc::c_int as uint8_t,
    0x4e as libc::c_int as uint8_t,
    0x4b as libc::c_int as uint8_t,
    0xf6 as libc::c_int as uint8_t,
    0xd8 as libc::c_int as uint8_t,
    0x3f as libc::c_int as uint8_t,
    0x44 as libc::c_int as uint8_t,
    0x2e as libc::c_int as uint8_t,
    0x11 as libc::c_int as uint8_t,
    0xe0 as libc::c_int as uint8_t,
    0xbd as libc::c_int as uint8_t,
    0x6a as libc::c_int as uint8_t,
    0xf2 as libc::c_int as uint8_t,
    0x5d as libc::c_int as uint8_t,
    0xf5 as libc::c_int as uint8_t,
    0xf9 as libc::c_int as uint8_t,
    0x53 as libc::c_int as uint8_t,
    0xea as libc::c_int as uint8_t,
    0xa4 as libc::c_int as uint8_t,
    0xc8 as libc::c_int as uint8_t,
    0xd9 as libc::c_int as uint8_t,
    0x50 as libc::c_int as uint8_t,
    0x33 as libc::c_int as uint8_t,
    0x81 as libc::c_int as uint8_t,
    0xd9 as libc::c_int as uint8_t,
    0xa8 as libc::c_int as uint8_t,
    0x2d as libc::c_int as uint8_t,
    0x91 as libc::c_int as uint8_t,
    0x7d as libc::c_int as uint8_t,
    0x13 as libc::c_int as uint8_t,
    0x2a as libc::c_int as uint8_t,
    0x11 as libc::c_int as uint8_t,
    0xcf as libc::c_int as uint8_t,
    0xde as libc::c_int as uint8_t,
    0x3f as libc::c_int as uint8_t,
    0xa as libc::c_int as uint8_t,
    0xd2 as libc::c_int as uint8_t,
    0xbc as libc::c_int as uint8_t,
    0x33 as libc::c_int as uint8_t,
    0xb2 as libc::c_int as uint8_t,
    0x62 as libc::c_int as uint8_t,
    0x53 as libc::c_int as uint8_t,
    0xea as libc::c_int as uint8_t,
    0x77 as libc::c_int as uint8_t,
    0x88 as libc::c_int as uint8_t,
    0x43 as libc::c_int as uint8_t,
    0x66 as libc::c_int as uint8_t,
    0x27 as libc::c_int as uint8_t,
    0x43 as libc::c_int as uint8_t,
    0x85 as libc::c_int as uint8_t,
    0xe9 as libc::c_int as uint8_t,
    0x5f as libc::c_int as uint8_t,
    0x55 as libc::c_int as uint8_t,
    0xf5 as libc::c_int as uint8_t,
    0x2a as libc::c_int as uint8_t,
    0x8a as libc::c_int as uint8_t,
    0xac as libc::c_int as uint8_t,
    0xdf as libc::c_int as uint8_t,
    0xff as libc::c_int as uint8_t,
    0x9b as libc::c_int as uint8_t,
    0x4c as libc::c_int as uint8_t,
    0x96 as libc::c_int as uint8_t,
    0x9c as libc::c_int as uint8_t,
    0xa5 as libc::c_int as uint8_t,
    0x7a as libc::c_int as uint8_t,
    0xce as libc::c_int as uint8_t,
    0xd5 as libc::c_int as uint8_t,
    0x79 as libc::c_int as uint8_t,
    0x18 as libc::c_int as uint8_t,
    0xf1 as libc::c_int as uint8_t,
    0xb as libc::c_int as uint8_t,
    0x58 as libc::c_int as uint8_t,
    0x95 as libc::c_int as uint8_t,
    0x7a as libc::c_int as uint8_t,
    0xe7 as libc::c_int as uint8_t,
    0xd3 as libc::c_int as uint8_t,
    0x74 as libc::c_int as uint8_t,
    0x65 as libc::c_int as uint8_t,
    0xb as libc::c_int as uint8_t,
    0xa4 as libc::c_int as uint8_t,
    0x64 as libc::c_int as uint8_t,
    0x30 as libc::c_int as uint8_t,
    0xe8 as libc::c_int as uint8_t,
    0x5c as libc::c_int as uint8_t,
    0xfc as libc::c_int as uint8_t,
    0x55 as libc::c_int as uint8_t,
    0x56 as libc::c_int as uint8_t,
    0xee as libc::c_int as uint8_t,
    0x14 as libc::c_int as uint8_t,
    0x14 as libc::c_int as uint8_t,
    0xd3 as libc::c_int as uint8_t,
    0x45 as libc::c_int as uint8_t,
    0x3b as libc::c_int as uint8_t,
    0xf8 as libc::c_int as uint8_t,
    0xde as libc::c_int as uint8_t,
    0x5 as libc::c_int as uint8_t,
    0x3e as libc::c_int as uint8_t,
    0xb9 as libc::c_int as uint8_t,
    0x3c as libc::c_int as uint8_t,
    0xd7 as libc::c_int as uint8_t,
    0x6a as libc::c_int as uint8_t,
    0x52 as libc::c_int as uint8_t,
    0x72 as libc::c_int as uint8_t,
    0x5b as libc::c_int as uint8_t,
    0x39 as libc::c_int as uint8_t,
    0x9 as libc::c_int as uint8_t,
    0xbe as libc::c_int as uint8_t,
    0x82 as libc::c_int as uint8_t,
    0x23 as libc::c_int as uint8_t,
    0x10 as libc::c_int as uint8_t,
    0x4a as libc::c_int as uint8_t,
    0xb7 as libc::c_int as uint8_t,
    0xc3 as libc::c_int as uint8_t,
    0xdc as libc::c_int as uint8_t,
    0x4c as libc::c_int as uint8_t,
    0x5d as libc::c_int as uint8_t,
    0xc9 as libc::c_int as uint8_t,
    0xf1 as libc::c_int as uint8_t,
    0x14 as libc::c_int as uint8_t,
    0x83 as libc::c_int as uint8_t,
    0xf9 as libc::c_int as uint8_t,
    0xb as libc::c_int as uint8_t,
    0x9b as libc::c_int as uint8_t,
    0xe9 as libc::c_int as uint8_t,
    0x23 as libc::c_int as uint8_t,
    0x84 as libc::c_int as uint8_t,
    0x6a as libc::c_int as uint8_t,
    0xc4 as libc::c_int as uint8_t,
    0x8 as libc::c_int as uint8_t,
    0x3d as libc::c_int as uint8_t,
    0xda as libc::c_int as uint8_t,
    0x3d as libc::c_int as uint8_t,
    0x12 as libc::c_int as uint8_t,
    0x95 as libc::c_int as uint8_t,
    0x87 as libc::c_int as uint8_t,
    0x18 as libc::c_int as uint8_t,
    0xa4 as libc::c_int as uint8_t,
    0x7d as libc::c_int as uint8_t,
    0x3f as libc::c_int as uint8_t,
    0x23 as libc::c_int as uint8_t,
    0xde as libc::c_int as uint8_t,
    0xd4 as libc::c_int as uint8_t,
    0x1e as libc::c_int as uint8_t,
    0xa8 as libc::c_int as uint8_t,
    0x47 as libc::c_int as uint8_t,
    0xc3 as libc::c_int as uint8_t,
    0x71 as libc::c_int as uint8_t,
    0xdb as libc::c_int as uint8_t,
    0xf5 as libc::c_int as uint8_t,
    0x3 as libc::c_int as uint8_t,
    0x6c as libc::c_int as uint8_t,
    0x57 as libc::c_int as uint8_t,
    0xe7 as libc::c_int as uint8_t,
    0xa4 as libc::c_int as uint8_t,
    0x43 as libc::c_int as uint8_t,
    0x82 as libc::c_int as uint8_t,
    0x33 as libc::c_int as uint8_t,
    0x7b as libc::c_int as uint8_t,
    0x62 as libc::c_int as uint8_t,
    0x46 as libc::c_int as uint8_t,
    0x7d as libc::c_int as uint8_t,
    0xf7 as libc::c_int as uint8_t,
    0x10 as libc::c_int as uint8_t,
    0x69 as libc::c_int as uint8_t,
    0x18 as libc::c_int as uint8_t,
    0x38 as libc::c_int as uint8_t,
    0x27 as libc::c_int as uint8_t,
    0x9a as libc::c_int as uint8_t,
    0x6f as libc::c_int as uint8_t,
    0x38 as libc::c_int as uint8_t,
    0xac as libc::c_int as uint8_t,
    0xfa as libc::c_int as uint8_t,
    0x92 as libc::c_int as uint8_t,
    0xc5 as libc::c_int as uint8_t,
    0xae as libc::c_int as uint8_t,
    0x66 as libc::c_int as uint8_t,
    0xa6 as libc::c_int as uint8_t,
    0x73 as libc::c_int as uint8_t,
    0x95 as libc::c_int as uint8_t,
    0x15 as libc::c_int as uint8_t,
    0xe as libc::c_int as uint8_t,
    0x4c as libc::c_int as uint8_t,
    0x4 as libc::c_int as uint8_t,
    0xb6 as libc::c_int as uint8_t,
    0xfc as libc::c_int as uint8_t,
    0xf5 as libc::c_int as uint8_t,
    0xc7 as libc::c_int as uint8_t,
    0x21 as libc::c_int as uint8_t,
    0x3a as libc::c_int as uint8_t,
    0x99 as libc::c_int as uint8_t,
    0xdb as libc::c_int as uint8_t,
    0xe as libc::c_int as uint8_t,
    0x36 as libc::c_int as uint8_t,
    0xf0 as libc::c_int as uint8_t,
    0x56 as libc::c_int as uint8_t,
    0xbc as libc::c_int as uint8_t,
    0x75 as libc::c_int as uint8_t,
    0xf9 as libc::c_int as uint8_t,
    0x87 as libc::c_int as uint8_t,
    0x9b as libc::c_int as uint8_t,
    0x11 as libc::c_int as uint8_t,
    0x18 as libc::c_int as uint8_t,
    0x92 as libc::c_int as uint8_t,
    0x64 as libc::c_int as uint8_t,
    0x1a as libc::c_int as uint8_t,
    0xe7 as libc::c_int as uint8_t,
    0xc7 as libc::c_int as uint8_t,
    0xab as libc::c_int as uint8_t,
    0x5a as libc::c_int as uint8_t,
    0xc7 as libc::c_int as uint8_t,
    0x26 as libc::c_int as uint8_t,
    0x7f as libc::c_int as uint8_t,
    0x13 as libc::c_int as uint8_t,
    0x98 as libc::c_int as uint8_t,
    0x42 as libc::c_int as uint8_t,
    0x52 as libc::c_int as uint8_t,
    0x43 as libc::c_int as uint8_t,
    0xdb as libc::c_int as uint8_t,
    0xc8 as libc::c_int as uint8_t,
    0x6d as libc::c_int as uint8_t,
    0xb as libc::c_int as uint8_t,
    0xb7 as libc::c_int as uint8_t,
    0x31 as libc::c_int as uint8_t,
    0x93 as libc::c_int as uint8_t,
    0x24 as libc::c_int as uint8_t,
    0xd6 as libc::c_int as uint8_t,
    0xe8 as libc::c_int as uint8_t,
    0x24 as libc::c_int as uint8_t,
    0x1f as libc::c_int as uint8_t,
    0x6f as libc::c_int as uint8_t,
    0x21 as libc::c_int as uint8_t,
    0xa7 as libc::c_int as uint8_t,
    0x8c as libc::c_int as uint8_t,
    0xeb as libc::c_int as uint8_t,
    0xdb as libc::c_int as uint8_t,
    0x83 as libc::c_int as uint8_t,
    0xb8 as libc::c_int as uint8_t,
    0x89 as libc::c_int as uint8_t,
    0xe3 as libc::c_int as uint8_t,
    0xc1 as libc::c_int as uint8_t,
    0xd7 as libc::c_int as uint8_t,
    0x69 as libc::c_int as uint8_t,
    0x3b as libc::c_int as uint8_t,
    0x2 as libc::c_int as uint8_t,
    0x6b as libc::c_int as uint8_t,
    0x54 as libc::c_int as uint8_t,
    0xf as libc::c_int as uint8_t,
    0x84 as libc::c_int as uint8_t,
    0x2f as libc::c_int as uint8_t,
    0xb5 as libc::c_int as uint8_t,
    0x5c as libc::c_int as uint8_t,
    0x17 as libc::c_int as uint8_t,
    0x77 as libc::c_int as uint8_t,
    0xbe as libc::c_int as uint8_t,
    0xe5 as libc::c_int as uint8_t,
    0x61 as libc::c_int as uint8_t,
    0xd as libc::c_int as uint8_t,
    0xc5 as libc::c_int as uint8_t,
    0xdf as libc::c_int as uint8_t,
    0x3b as libc::c_int as uint8_t,
    0xcf as libc::c_int as uint8_t,
    0x3e as libc::c_int as uint8_t,
    0x93 as libc::c_int as uint8_t,
    0x4f as libc::c_int as uint8_t,
    0xf5 as libc::c_int as uint8_t,
    0x89 as libc::c_int as uint8_t,
    0xb9 as libc::c_int as uint8_t,
    0x5a as libc::c_int as uint8_t,
    0xc5 as libc::c_int as uint8_t,
    0x29 as libc::c_int as uint8_t,
    0x31 as libc::c_int as uint8_t,
    0xc0 as libc::c_int as uint8_t,
    0xc2 as libc::c_int as uint8_t,
    0xff as libc::c_int as uint8_t,
    0xe5 as libc::c_int as uint8_t,
    0x3f as libc::c_int as uint8_t,
    0xa6 as libc::c_int as uint8_t,
    0xac as libc::c_int as uint8_t,
    0x3 as libc::c_int as uint8_t,
    0xca as libc::c_int as uint8_t,
    0xf5 as libc::c_int as uint8_t,
    0xff as libc::c_int as uint8_t,
    0xe0 as libc::c_int as uint8_t,
    0x36 as libc::c_int as uint8_t,
    0xce as libc::c_int as uint8_t,
    0xf3 as libc::c_int as uint8_t,
    0xe2 as libc::c_int as uint8_t,
    0xb7 as libc::c_int as uint8_t,
    0x9c as libc::c_int as uint8_t,
    0x2 as libc::c_int as uint8_t,
    0xe9 as libc::c_int as uint8_t,
    0x9e as libc::c_int as uint8_t,
    0xd2 as libc::c_int as uint8_t,
    0xbc as libc::c_int as uint8_t,
    0x87 as libc::c_int as uint8_t,
    0x2f as libc::c_int as uint8_t,
    0x3d as libc::c_int as uint8_t,
    0x9a as libc::c_int as uint8_t,
    0x1d as libc::c_int as uint8_t,
    0x8f as libc::c_int as uint8_t,
    0xc5 as libc::c_int as uint8_t,
    0x72 as libc::c_int as uint8_t,
    0xb8 as libc::c_int as uint8_t,
    0xa2 as libc::c_int as uint8_t,
    0x1 as libc::c_int as uint8_t,
    0xd4 as libc::c_int as uint8_t,
    0x68 as libc::c_int as uint8_t,
    0xb1 as libc::c_int as uint8_t,
    0x84 as libc::c_int as uint8_t,
    0x16 as libc::c_int as uint8_t,
    0x10 as libc::c_int as uint8_t,
    0xf6 as libc::c_int as uint8_t,
    0xf3 as libc::c_int as uint8_t,
    0x52 as libc::c_int as uint8_t,
    0x25 as libc::c_int as uint8_t,
    0xd9 as libc::c_int as uint8_t,
    0xdc as libc::c_int as uint8_t,
    0x4c as libc::c_int as uint8_t,
    0xdd as libc::c_int as uint8_t,
    0xf as libc::c_int as uint8_t,
    0xd6 as libc::c_int as uint8_t,
    0x4a as libc::c_int as uint8_t,
    0xcf as libc::c_int as uint8_t,
    0x60 as libc::c_int as uint8_t,
    0x96 as libc::c_int as uint8_t,
    0x7e as libc::c_int as uint8_t,
    0xcc as libc::c_int as uint8_t,
    0x42 as libc::c_int as uint8_t,
    0xf as libc::c_int as uint8_t,
    0x64 as libc::c_int as uint8_t,
    0x9d as libc::c_int as uint8_t,
    0x72 as libc::c_int as uint8_t,
    0x46 as libc::c_int as uint8_t,
    0x4 as libc::c_int as uint8_t,
    0x7 as libc::c_int as uint8_t,
    0xf2 as libc::c_int as uint8_t,
    0x5b as libc::c_int as uint8_t,
    0xf4 as libc::c_int as uint8_t,
    0x7 as libc::c_int as uint8_t,
    0xd1 as libc::c_int as uint8_t,
    0xf4 as libc::c_int as uint8_t,
    0x59 as libc::c_int as uint8_t,
    0x71 as libc::c_int as uint8_t,
];
static mut kSpakeMSmallPrecomp: [uint8_t; 960] = [
    0xc8 as libc::c_int as uint8_t,
    0xa6 as libc::c_int as uint8_t,
    0x63 as libc::c_int as uint8_t,
    0xc5 as libc::c_int as uint8_t,
    0x97 as libc::c_int as uint8_t,
    0xf1 as libc::c_int as uint8_t,
    0xee as libc::c_int as uint8_t,
    0x40 as libc::c_int as uint8_t,
    0xab as libc::c_int as uint8_t,
    0x62 as libc::c_int as uint8_t,
    0x42 as libc::c_int as uint8_t,
    0xee as libc::c_int as uint8_t,
    0x25 as libc::c_int as uint8_t,
    0x6f as libc::c_int as uint8_t,
    0x32 as libc::c_int as uint8_t,
    0x6c as libc::c_int as uint8_t,
    0x75 as libc::c_int as uint8_t,
    0x2c as libc::c_int as uint8_t,
    0xa7 as libc::c_int as uint8_t,
    0xd3 as libc::c_int as uint8_t,
    0xbd as libc::c_int as uint8_t,
    0x32 as libc::c_int as uint8_t,
    0x3b as libc::c_int as uint8_t,
    0x1e as libc::c_int as uint8_t,
    0x11 as libc::c_int as uint8_t,
    0x9c as libc::c_int as uint8_t,
    0xbd as libc::c_int as uint8_t,
    0x4 as libc::c_int as uint8_t,
    0xa9 as libc::c_int as uint8_t,
    0x78 as libc::c_int as uint8_t,
    0x6f as libc::c_int as uint8_t,
    0x45 as libc::c_int as uint8_t,
    0x5a as libc::c_int as uint8_t,
    0xda as libc::c_int as uint8_t,
    0x7e as libc::c_int as uint8_t,
    0x4b as libc::c_int as uint8_t,
    0xf6 as libc::c_int as uint8_t,
    0xdd as libc::c_int as uint8_t,
    0xd9 as libc::c_int as uint8_t,
    0xad as libc::c_int as uint8_t,
    0xb6 as libc::c_int as uint8_t,
    0x62 as libc::c_int as uint8_t,
    0x6d as libc::c_int as uint8_t,
    0x32 as libc::c_int as uint8_t,
    0x13 as libc::c_int as uint8_t,
    0x1c as libc::c_int as uint8_t,
    0x6b as libc::c_int as uint8_t,
    0x5c as libc::c_int as uint8_t,
    0x51 as libc::c_int as uint8_t,
    0xa1 as libc::c_int as uint8_t,
    0xe3 as libc::c_int as uint8_t,
    0x47 as libc::c_int as uint8_t,
    0xa3 as libc::c_int as uint8_t,
    0x47 as libc::c_int as uint8_t,
    0x8f as libc::c_int as uint8_t,
    0x53 as libc::c_int as uint8_t,
    0xcf as libc::c_int as uint8_t,
    0xcf as libc::c_int as uint8_t,
    0x44 as libc::c_int as uint8_t,
    0x1b as libc::c_int as uint8_t,
    0x88 as libc::c_int as uint8_t,
    0xee as libc::c_int as uint8_t,
    0xd1 as libc::c_int as uint8_t,
    0x2e as libc::c_int as uint8_t,
    0x3 as libc::c_int as uint8_t,
    0x89 as libc::c_int as uint8_t,
    0xaf as libc::c_int as uint8_t,
    0xc0 as libc::c_int as uint8_t,
    0x61 as libc::c_int as uint8_t,
    0x2d as libc::c_int as uint8_t,
    0x9e as libc::c_int as uint8_t,
    0x35 as libc::c_int as uint8_t,
    0xeb as libc::c_int as uint8_t,
    0xe as libc::c_int as uint8_t,
    0x3 as libc::c_int as uint8_t,
    0xe0 as libc::c_int as uint8_t,
    0xb7 as libc::c_int as uint8_t,
    0xfb as libc::c_int as uint8_t,
    0xa5 as libc::c_int as uint8_t,
    0xbc as libc::c_int as uint8_t,
    0x44 as libc::c_int as uint8_t,
    0xbe as libc::c_int as uint8_t,
    0xc as libc::c_int as uint8_t,
    0x89 as libc::c_int as uint8_t,
    0xa as libc::c_int as uint8_t,
    0xf as libc::c_int as uint8_t,
    0xd6 as libc::c_int as uint8_t,
    0x59 as libc::c_int as uint8_t,
    0x47 as libc::c_int as uint8_t,
    0x9e as libc::c_int as uint8_t,
    0xe6 as libc::c_int as uint8_t,
    0x3d as libc::c_int as uint8_t,
    0x36 as libc::c_int as uint8_t,
    0x9d as libc::c_int as uint8_t,
    0xff as libc::c_int as uint8_t,
    0x44 as libc::c_int as uint8_t,
    0x5e as libc::c_int as uint8_t,
    0xac as libc::c_int as uint8_t,
    0xab as libc::c_int as uint8_t,
    0xe5 as libc::c_int as uint8_t,
    0x3a as libc::c_int as uint8_t,
    0xd5 as libc::c_int as uint8_t,
    0xb0 as libc::c_int as uint8_t,
    0x35 as libc::c_int as uint8_t,
    0x9f as libc::c_int as uint8_t,
    0x6d as libc::c_int as uint8_t,
    0x7f as libc::c_int as uint8_t,
    0xba as libc::c_int as uint8_t,
    0xc0 as libc::c_int as uint8_t,
    0x85 as libc::c_int as uint8_t,
    0xe as libc::c_int as uint8_t,
    0xf4 as libc::c_int as uint8_t,
    0x70 as libc::c_int as uint8_t,
    0x3f as libc::c_int as uint8_t,
    0x13 as libc::c_int as uint8_t,
    0x90 as libc::c_int as uint8_t,
    0x4c as libc::c_int as uint8_t,
    0x50 as libc::c_int as uint8_t,
    0x1a as libc::c_int as uint8_t,
    0xee as libc::c_int as uint8_t,
    0xc5 as libc::c_int as uint8_t,
    0xeb as libc::c_int as uint8_t,
    0x69 as libc::c_int as uint8_t,
    0xfe as libc::c_int as uint8_t,
    0x98 as libc::c_int as uint8_t,
    0x42 as libc::c_int as uint8_t,
    0x87 as libc::c_int as uint8_t,
    0x1d as libc::c_int as uint8_t,
    0xce as libc::c_int as uint8_t,
    0x6c as libc::c_int as uint8_t,
    0x29 as libc::c_int as uint8_t,
    0xaa as libc::c_int as uint8_t,
    0x2b as libc::c_int as uint8_t,
    0x31 as libc::c_int as uint8_t,
    0xc2 as libc::c_int as uint8_t,
    0x38 as libc::c_int as uint8_t,
    0x7b as libc::c_int as uint8_t,
    0x6b as libc::c_int as uint8_t,
    0xee as libc::c_int as uint8_t,
    0x88 as libc::c_int as uint8_t,
    0xb as libc::c_int as uint8_t,
    0xba as libc::c_int as uint8_t,
    0xce as libc::c_int as uint8_t,
    0xa8 as libc::c_int as uint8_t,
    0xca as libc::c_int as uint8_t,
    0x19 as libc::c_int as uint8_t,
    0x60 as libc::c_int as uint8_t,
    0x1b as libc::c_int as uint8_t,
    0x16 as libc::c_int as uint8_t,
    0xf1 as libc::c_int as uint8_t,
    0x25 as libc::c_int as uint8_t,
    0x1e as libc::c_int as uint8_t,
    0xcf as libc::c_int as uint8_t,
    0x63 as libc::c_int as uint8_t,
    0x66 as libc::c_int as uint8_t,
    0x1e as libc::c_int as uint8_t,
    0xbb as libc::c_int as uint8_t,
    0x63 as libc::c_int as uint8_t,
    0xeb as libc::c_int as uint8_t,
    0x7d as libc::c_int as uint8_t,
    0xca as libc::c_int as uint8_t,
    0xd2 as libc::c_int as uint8_t,
    0xb4 as libc::c_int as uint8_t,
    0x23 as libc::c_int as uint8_t,
    0x5a as libc::c_int as uint8_t,
    0x1 as libc::c_int as uint8_t,
    0x6f as libc::c_int as uint8_t,
    0x5 as libc::c_int as uint8_t,
    0xd1 as libc::c_int as uint8_t,
    0xdc as libc::c_int as uint8_t,
    0x41 as libc::c_int as uint8_t,
    0x73 as libc::c_int as uint8_t,
    0x75 as libc::c_int as uint8_t,
    0xc0 as libc::c_int as uint8_t,
    0xfd as libc::c_int as uint8_t,
    0x30 as libc::c_int as uint8_t,
    0x91 as libc::c_int as uint8_t,
    0x52 as libc::c_int as uint8_t,
    0x68 as libc::c_int as uint8_t,
    0x96 as libc::c_int as uint8_t,
    0x45 as libc::c_int as uint8_t,
    0xb3 as libc::c_int as uint8_t,
    0x66 as libc::c_int as uint8_t,
    0x1 as libc::c_int as uint8_t,
    0x3b as libc::c_int as uint8_t,
    0x53 as libc::c_int as uint8_t,
    0x89 as libc::c_int as uint8_t,
    0x3c as libc::c_int as uint8_t,
    0x69 as libc::c_int as uint8_t,
    0xbc as libc::c_int as uint8_t,
    0x6c as libc::c_int as uint8_t,
    0x69 as libc::c_int as uint8_t,
    0xe3 as libc::c_int as uint8_t,
    0x51 as libc::c_int as uint8_t,
    0x8f as libc::c_int as uint8_t,
    0xe3 as libc::c_int as uint8_t,
    0xd2 as libc::c_int as uint8_t,
    0x84 as libc::c_int as uint8_t,
    0xd5 as libc::c_int as uint8_t,
    0x28 as libc::c_int as uint8_t,
    0x66 as libc::c_int as uint8_t,
    0xb5 as libc::c_int as uint8_t,
    0xe6 as libc::c_int as uint8_t,
    0x6 as libc::c_int as uint8_t,
    0x9 as libc::c_int as uint8_t,
    0xfe as libc::c_int as uint8_t,
    0x6d as libc::c_int as uint8_t,
    0xb0 as libc::c_int as uint8_t,
    0x72 as libc::c_int as uint8_t,
    0x16 as libc::c_int as uint8_t,
    0xe0 as libc::c_int as uint8_t,
    0x8a as libc::c_int as uint8_t,
    0xce as libc::c_int as uint8_t,
    0x61 as libc::c_int as uint8_t,
    0x65 as libc::c_int as uint8_t,
    0xa9 as libc::c_int as uint8_t,
    0x21 as libc::c_int as uint8_t,
    0x32 as libc::c_int as uint8_t,
    0x48 as libc::c_int as uint8_t,
    0xdc as libc::c_int as uint8_t,
    0x7a as libc::c_int as uint8_t,
    0x1d as libc::c_int as uint8_t,
    0xe1 as libc::c_int as uint8_t,
    0x38 as libc::c_int as uint8_t,
    0x7f as libc::c_int as uint8_t,
    0x8c as libc::c_int as uint8_t,
    0x75 as libc::c_int as uint8_t,
    0x88 as libc::c_int as uint8_t,
    0x3d as libc::c_int as uint8_t,
    0x8 as libc::c_int as uint8_t,
    0xa9 as libc::c_int as uint8_t,
    0x4a as libc::c_int as uint8_t,
    0x6f as libc::c_int as uint8_t,
    0x3d as libc::c_int as uint8_t,
    0x9f as libc::c_int as uint8_t,
    0x7f as libc::c_int as uint8_t,
    0x3f as libc::c_int as uint8_t,
    0xbd as libc::c_int as uint8_t,
    0x57 as libc::c_int as uint8_t,
    0x6b as libc::c_int as uint8_t,
    0x19 as libc::c_int as uint8_t,
    0xce as libc::c_int as uint8_t,
    0x3f as libc::c_int as uint8_t,
    0x4a as libc::c_int as uint8_t,
    0xc9 as libc::c_int as uint8_t,
    0xd3 as libc::c_int as uint8_t,
    0xf9 as libc::c_int as uint8_t,
    0x6e as libc::c_int as uint8_t,
    0x72 as libc::c_int as uint8_t,
    0x7b as libc::c_int as uint8_t,
    0x5b as libc::c_int as uint8_t,
    0x74 as libc::c_int as uint8_t,
    0xea as libc::c_int as uint8_t,
    0xbe as libc::c_int as uint8_t,
    0x9c as libc::c_int as uint8_t,
    0x7a as libc::c_int as uint8_t,
    0x6d as libc::c_int as uint8_t,
    0x9c as libc::c_int as uint8_t,
    0x40 as libc::c_int as uint8_t,
    0x49 as libc::c_int as uint8_t,
    0xe6 as libc::c_int as uint8_t,
    0xfb as libc::c_int as uint8_t,
    0x2a as libc::c_int as uint8_t,
    0x1a as libc::c_int as uint8_t,
    0x75 as libc::c_int as uint8_t,
    0x70 as libc::c_int as uint8_t,
    0xe5 as libc::c_int as uint8_t,
    0x4e as libc::c_int as uint8_t,
    0xed as libc::c_int as uint8_t,
    0x74 as libc::c_int as uint8_t,
    0xe0 as libc::c_int as uint8_t,
    0x75 as libc::c_int as uint8_t,
    0xac as libc::c_int as uint8_t,
    0xc0 as libc::c_int as uint8_t,
    0xb1 as libc::c_int as uint8_t,
    0x11 as libc::c_int as uint8_t,
    0x3e as libc::c_int as uint8_t,
    0xf2 as libc::c_int as uint8_t,
    0xaf as libc::c_int as uint8_t,
    0x88 as libc::c_int as uint8_t,
    0x4d as libc::c_int as uint8_t,
    0x66 as libc::c_int as uint8_t,
    0xb6 as libc::c_int as uint8_t,
    0xf6 as libc::c_int as uint8_t,
    0x15 as libc::c_int as uint8_t,
    0x4f as libc::c_int as uint8_t,
    0x3c as libc::c_int as uint8_t,
    0x6c as libc::c_int as uint8_t,
    0x77 as libc::c_int as uint8_t,
    0xae as libc::c_int as uint8_t,
    0x47 as libc::c_int as uint8_t,
    0x51 as libc::c_int as uint8_t,
    0x63 as libc::c_int as uint8_t,
    0x9a as libc::c_int as uint8_t,
    0xfe as libc::c_int as uint8_t,
    0xe1 as libc::c_int as uint8_t,
    0xb4 as libc::c_int as uint8_t,
    0x1a as libc::c_int as uint8_t,
    0x12 as libc::c_int as uint8_t,
    0xdf as libc::c_int as uint8_t,
    0xe9 as libc::c_int as uint8_t,
    0x54 as libc::c_int as uint8_t,
    0x8d as libc::c_int as uint8_t,
    0x3b as libc::c_int as uint8_t,
    0x30 as libc::c_int as uint8_t,
    0x2a as libc::c_int as uint8_t,
    0x75 as libc::c_int as uint8_t,
    0xe3 as libc::c_int as uint8_t,
    0xe5 as libc::c_int as uint8_t,
    0x29 as libc::c_int as uint8_t,
    0xb1 as libc::c_int as uint8_t,
    0x4c as libc::c_int as uint8_t,
    0xb0 as libc::c_int as uint8_t,
    0x7c as libc::c_int as uint8_t,
    0x6d as libc::c_int as uint8_t,
    0xb5 as libc::c_int as uint8_t,
    0xae as libc::c_int as uint8_t,
    0x85 as libc::c_int as uint8_t,
    0xdb as libc::c_int as uint8_t,
    0x1e as libc::c_int as uint8_t,
    0x38 as libc::c_int as uint8_t,
    0x55 as libc::c_int as uint8_t,
    0x96 as libc::c_int as uint8_t,
    0xa5 as libc::c_int as uint8_t,
    0x5b as libc::c_int as uint8_t,
    0x9f as libc::c_int as uint8_t,
    0x15 as libc::c_int as uint8_t,
    0x23 as libc::c_int as uint8_t,
    0x28 as libc::c_int as uint8_t,
    0x36 as libc::c_int as uint8_t,
    0xb8 as libc::c_int as uint8_t,
    0xa2 as libc::c_int as uint8_t,
    0x41 as libc::c_int as uint8_t,
    0xb4 as libc::c_int as uint8_t,
    0xd7 as libc::c_int as uint8_t,
    0x19 as libc::c_int as uint8_t,
    0x91 as libc::c_int as uint8_t,
    0x8d as libc::c_int as uint8_t,
    0x26 as libc::c_int as uint8_t,
    0x3e as libc::c_int as uint8_t,
    0xca as libc::c_int as uint8_t,
    0x9c as libc::c_int as uint8_t,
    0x5 as libc::c_int as uint8_t,
    0x7a as libc::c_int as uint8_t,
    0x2b as libc::c_int as uint8_t,
    0x60 as libc::c_int as uint8_t,
    0x45 as libc::c_int as uint8_t,
    0x86 as libc::c_int as uint8_t,
    0x8b as libc::c_int as uint8_t,
    0xee as libc::c_int as uint8_t,
    0x64 as libc::c_int as uint8_t,
    0x6f as libc::c_int as uint8_t,
    0x5c as libc::c_int as uint8_t,
    0x9 as libc::c_int as uint8_t,
    0x4d as libc::c_int as uint8_t,
    0x4b as libc::c_int as uint8_t,
    0x5a as libc::c_int as uint8_t,
    0x7f as libc::c_int as uint8_t,
    0xb0 as libc::c_int as uint8_t,
    0xc3 as libc::c_int as uint8_t,
    0x26 as libc::c_int as uint8_t,
    0x9d as libc::c_int as uint8_t,
    0x8b as libc::c_int as uint8_t,
    0xb8 as libc::c_int as uint8_t,
    0x83 as libc::c_int as uint8_t,
    0x69 as libc::c_int as uint8_t,
    0xcf as libc::c_int as uint8_t,
    0x16 as libc::c_int as uint8_t,
    0x72 as libc::c_int as uint8_t,
    0x62 as libc::c_int as uint8_t,
    0x3e as libc::c_int as uint8_t,
    0x5e as libc::c_int as uint8_t,
    0x53 as libc::c_int as uint8_t,
    0x4f as libc::c_int as uint8_t,
    0x9c as libc::c_int as uint8_t,
    0x73 as libc::c_int as uint8_t,
    0x76 as libc::c_int as uint8_t,
    0xfc as libc::c_int as uint8_t,
    0x19 as libc::c_int as uint8_t,
    0xef as libc::c_int as uint8_t,
    0xa0 as libc::c_int as uint8_t,
    0x74 as libc::c_int as uint8_t,
    0x3a as libc::c_int as uint8_t,
    0x11 as libc::c_int as uint8_t,
    0x1e as libc::c_int as uint8_t,
    0xd0 as libc::c_int as uint8_t,
    0x4d as libc::c_int as uint8_t,
    0xb7 as libc::c_int as uint8_t,
    0x87 as libc::c_int as uint8_t,
    0xa1 as libc::c_int as uint8_t,
    0xd6 as libc::c_int as uint8_t,
    0x87 as libc::c_int as uint8_t,
    0x6c as libc::c_int as uint8_t,
    0xe as libc::c_int as uint8_t,
    0x6c as libc::c_int as uint8_t,
    0x8c as libc::c_int as uint8_t,
    0xe9 as libc::c_int as uint8_t,
    0xa0 as libc::c_int as uint8_t,
    0x44 as libc::c_int as uint8_t,
    0xc4 as libc::c_int as uint8_t,
    0x72 as libc::c_int as uint8_t,
    0x3e as libc::c_int as uint8_t,
    0x73 as libc::c_int as uint8_t,
    0x17 as libc::c_int as uint8_t,
    0x13 as libc::c_int as uint8_t,
    0xd1 as libc::c_int as uint8_t,
    0x4e as libc::c_int as uint8_t,
    0x3d as libc::c_int as uint8_t,
    0x8e as libc::c_int as uint8_t,
    0x1d as libc::c_int as uint8_t,
    0x5a as libc::c_int as uint8_t,
    0x8b as libc::c_int as uint8_t,
    0x75 as libc::c_int as uint8_t,
    0xcb as libc::c_int as uint8_t,
    0x59 as libc::c_int as uint8_t,
    0x2c as libc::c_int as uint8_t,
    0x47 as libc::c_int as uint8_t,
    0x87 as libc::c_int as uint8_t,
    0x15 as libc::c_int as uint8_t,
    0x41 as libc::c_int as uint8_t,
    0xfe as libc::c_int as uint8_t,
    0x8 as libc::c_int as uint8_t,
    0xe9 as libc::c_int as uint8_t,
    0xa6 as libc::c_int as uint8_t,
    0x97 as libc::c_int as uint8_t,
    0x17 as libc::c_int as uint8_t,
    0x8 as libc::c_int as uint8_t,
    0x26 as libc::c_int as uint8_t,
    0x6a as libc::c_int as uint8_t,
    0xb5 as libc::c_int as uint8_t,
    0xbb as libc::c_int as uint8_t,
    0x73 as libc::c_int as uint8_t,
    0xaa as libc::c_int as uint8_t,
    0xb8 as libc::c_int as uint8_t,
    0x5b as libc::c_int as uint8_t,
    0x65 as libc::c_int as uint8_t,
    0x65 as libc::c_int as uint8_t,
    0x5b as libc::c_int as uint8_t,
    0x30 as libc::c_int as uint8_t,
    0x9e as libc::c_int as uint8_t,
    0x62 as libc::c_int as uint8_t,
    0x59 as libc::c_int as uint8_t,
    0x2 as libc::c_int as uint8_t,
    0xf8 as libc::c_int as uint8_t,
    0xb8 as libc::c_int as uint8_t,
    0xf as libc::c_int as uint8_t,
    0x32 as libc::c_int as uint8_t,
    0x10 as libc::c_int as uint8_t,
    0xc1 as libc::c_int as uint8_t,
    0x36 as libc::c_int as uint8_t,
    0x8 as libc::c_int as uint8_t,
    0x52 as libc::c_int as uint8_t,
    0x98 as libc::c_int as uint8_t,
    0x4a as libc::c_int as uint8_t,
    0x1e as libc::c_int as uint8_t,
    0xf0 as libc::c_int as uint8_t,
    0xab as libc::c_int as uint8_t,
    0x21 as libc::c_int as uint8_t,
    0x5e as libc::c_int as uint8_t,
    0xde as libc::c_int as uint8_t,
    0x16 as libc::c_int as uint8_t,
    0xc as libc::c_int as uint8_t,
    0xda as libc::c_int as uint8_t,
    0x9 as libc::c_int as uint8_t,
    0x99 as libc::c_int as uint8_t,
    0x6b as libc::c_int as uint8_t,
    0x9e as libc::c_int as uint8_t,
    0xc0 as libc::c_int as uint8_t,
    0x90 as libc::c_int as uint8_t,
    0xa5 as libc::c_int as uint8_t,
    0x5a as libc::c_int as uint8_t,
    0xcc as libc::c_int as uint8_t,
    0xb0 as libc::c_int as uint8_t,
    0xb7 as libc::c_int as uint8_t,
    0xbb as libc::c_int as uint8_t,
    0xd2 as libc::c_int as uint8_t,
    0x8b as libc::c_int as uint8_t,
    0x5f as libc::c_int as uint8_t,
    0xd3 as libc::c_int as uint8_t,
    0x3b as libc::c_int as uint8_t,
    0x3e as libc::c_int as uint8_t,
    0x8c as libc::c_int as uint8_t,
    0xa5 as libc::c_int as uint8_t,
    0x71 as libc::c_int as uint8_t,
    0x66 as libc::c_int as uint8_t,
    0x6 as libc::c_int as uint8_t,
    0xe3 as libc::c_int as uint8_t,
    0x28 as libc::c_int as uint8_t,
    0xd4 as libc::c_int as uint8_t,
    0xf8 as libc::c_int as uint8_t,
    0x3f as libc::c_int as uint8_t,
    0xe5 as libc::c_int as uint8_t,
    0x27 as libc::c_int as uint8_t,
    0xdf as libc::c_int as uint8_t,
    0xfe as libc::c_int as uint8_t,
    0xf as libc::c_int as uint8_t,
    0x9 as libc::c_int as uint8_t,
    0xb2 as libc::c_int as uint8_t,
    0x8a as libc::c_int as uint8_t,
    0x9 as libc::c_int as uint8_t,
    0x5a as libc::c_int as uint8_t,
    0x23 as libc::c_int as uint8_t,
    0x61 as libc::c_int as uint8_t,
    0xd as libc::c_int as uint8_t,
    0x2d as libc::c_int as uint8_t,
    0xf5 as libc::c_int as uint8_t,
    0x44 as libc::c_int as uint8_t,
    0xf1 as libc::c_int as uint8_t,
    0x5c as libc::c_int as uint8_t,
    0xf8 as libc::c_int as uint8_t,
    0x82 as libc::c_int as uint8_t,
    0x4e as libc::c_int as uint8_t,
    0xdc as libc::c_int as uint8_t,
    0x78 as libc::c_int as uint8_t,
    0x7a as libc::c_int as uint8_t,
    0xab as libc::c_int as uint8_t,
    0xc3 as libc::c_int as uint8_t,
    0x57 as libc::c_int as uint8_t,
    0x91 as libc::c_int as uint8_t,
    0xaf as libc::c_int as uint8_t,
    0x65 as libc::c_int as uint8_t,
    0x6e as libc::c_int as uint8_t,
    0x71 as libc::c_int as uint8_t,
    0xf1 as libc::c_int as uint8_t,
    0x44 as libc::c_int as uint8_t,
    0xbf as libc::c_int as uint8_t,
    0xed as libc::c_int as uint8_t,
    0x43 as libc::c_int as uint8_t,
    0x50 as libc::c_int as uint8_t,
    0xb4 as libc::c_int as uint8_t,
    0x67 as libc::c_int as uint8_t,
    0x48 as libc::c_int as uint8_t,
    0xef as libc::c_int as uint8_t,
    0x5a as libc::c_int as uint8_t,
    0x10 as libc::c_int as uint8_t,
    0x46 as libc::c_int as uint8_t,
    0x81 as libc::c_int as uint8_t,
    0xb4 as libc::c_int as uint8_t,
    0xc as libc::c_int as uint8_t,
    0xc8 as libc::c_int as uint8_t,
    0x48 as libc::c_int as uint8_t,
    0xed as libc::c_int as uint8_t,
    0x99 as libc::c_int as uint8_t,
    0x7a as libc::c_int as uint8_t,
    0x45 as libc::c_int as uint8_t,
    0xa5 as libc::c_int as uint8_t,
    0x92 as libc::c_int as uint8_t,
    0xc3 as libc::c_int as uint8_t,
    0x69 as libc::c_int as uint8_t,
    0xd6 as libc::c_int as uint8_t,
    0xd7 as libc::c_int as uint8_t,
    0x8a as libc::c_int as uint8_t,
    0x20 as libc::c_int as uint8_t,
    0x1b as libc::c_int as uint8_t,
    0xeb as libc::c_int as uint8_t,
    0x8f as libc::c_int as uint8_t,
    0xb2 as libc::c_int as uint8_t,
    0xff as libc::c_int as uint8_t,
    0xec as libc::c_int as uint8_t,
    0x6d as libc::c_int as uint8_t,
    0x76 as libc::c_int as uint8_t,
    0x4 as libc::c_int as uint8_t,
    0xf8 as libc::c_int as uint8_t,
    0xc2 as libc::c_int as uint8_t,
    0x58 as libc::c_int as uint8_t,
    0x9b as libc::c_int as uint8_t,
    0xf2 as libc::c_int as uint8_t,
    0x20 as libc::c_int as uint8_t,
    0x53 as libc::c_int as uint8_t,
    0xc4 as libc::c_int as uint8_t,
    0x74 as libc::c_int as uint8_t,
    0x91 as libc::c_int as uint8_t,
    0x19 as libc::c_int as uint8_t,
    0xdd as libc::c_int as uint8_t,
    0x2d as libc::c_int as uint8_t,
    0x12 as libc::c_int as uint8_t,
    0x53 as libc::c_int as uint8_t,
    0xc7 as libc::c_int as uint8_t,
    0x6e as libc::c_int as uint8_t,
    0xd0 as libc::c_int as uint8_t,
    0x2 as libc::c_int as uint8_t,
    0x51 as libc::c_int as uint8_t,
    0x3c as libc::c_int as uint8_t,
    0xa6 as libc::c_int as uint8_t,
    0x7d as libc::c_int as uint8_t,
    0x80 as libc::c_int as uint8_t,
    0x75 as libc::c_int as uint8_t,
    0x6b as libc::c_int as uint8_t,
    0x1d as libc::c_int as uint8_t,
    0xdf as libc::c_int as uint8_t,
    0xf8 as libc::c_int as uint8_t,
    0x6a as libc::c_int as uint8_t,
    0x52 as libc::c_int as uint8_t,
    0xbb as libc::c_int as uint8_t,
    0x81 as libc::c_int as uint8_t,
    0xf8 as libc::c_int as uint8_t,
    0x30 as libc::c_int as uint8_t,
    0x45 as libc::c_int as uint8_t,
    0xef as libc::c_int as uint8_t,
    0x51 as libc::c_int as uint8_t,
    0x85 as libc::c_int as uint8_t,
    0x36 as libc::c_int as uint8_t,
    0xbe as libc::c_int as uint8_t,
    0x8e as libc::c_int as uint8_t,
    0xcf as libc::c_int as uint8_t,
    0xb as libc::c_int as uint8_t,
    0x9a as libc::c_int as uint8_t,
    0x46 as libc::c_int as uint8_t,
    0xe8 as libc::c_int as uint8_t,
    0x3f as libc::c_int as uint8_t,
    0x99 as libc::c_int as uint8_t,
    0xfd as libc::c_int as uint8_t,
    0xf7 as libc::c_int as uint8_t,
    0xd9 as libc::c_int as uint8_t,
    0x3e as libc::c_int as uint8_t,
    0x84 as libc::c_int as uint8_t,
    0xe5 as libc::c_int as uint8_t,
    0xe3 as libc::c_int as uint8_t,
    0x37 as libc::c_int as uint8_t,
    0xcf as libc::c_int as uint8_t,
    0x98 as libc::c_int as uint8_t,
    0x7f as libc::c_int as uint8_t,
    0xeb as libc::c_int as uint8_t,
    0x5e as libc::c_int as uint8_t,
    0x5a as libc::c_int as uint8_t,
    0x53 as libc::c_int as uint8_t,
    0x77 as libc::c_int as uint8_t,
    0x1c as libc::c_int as uint8_t,
    0x20 as libc::c_int as uint8_t,
    0xdc as libc::c_int as uint8_t,
    0xf1 as libc::c_int as uint8_t,
    0x20 as libc::c_int as uint8_t,
    0x99 as libc::c_int as uint8_t,
    0xec as libc::c_int as uint8_t,
    0x60 as libc::c_int as uint8_t,
    0x40 as libc::c_int as uint8_t,
    0x93 as libc::c_int as uint8_t,
    0xef as libc::c_int as uint8_t,
    0x5c as libc::c_int as uint8_t,
    0x1c as libc::c_int as uint8_t,
    0x81 as libc::c_int as uint8_t,
    0xe2 as libc::c_int as uint8_t,
    0xa5 as libc::c_int as uint8_t,
    0xad as libc::c_int as uint8_t,
    0x2a as libc::c_int as uint8_t,
    0xc2 as libc::c_int as uint8_t,
    0xdb as libc::c_int as uint8_t,
    0x6b as libc::c_int as uint8_t,
    0xc1 as libc::c_int as uint8_t,
    0x7e as libc::c_int as uint8_t,
    0x8f as libc::c_int as uint8_t,
    0xa9 as libc::c_int as uint8_t,
    0x23 as libc::c_int as uint8_t,
    0x5b as libc::c_int as uint8_t,
    0xd9 as libc::c_int as uint8_t,
    0xd as libc::c_int as uint8_t,
    0xfe as libc::c_int as uint8_t,
    0xa0 as libc::c_int as uint8_t,
    0xac as libc::c_int as uint8_t,
    0x11 as libc::c_int as uint8_t,
    0x28 as libc::c_int as uint8_t,
    0xba as libc::c_int as uint8_t,
    0x8e as libc::c_int as uint8_t,
    0x92 as libc::c_int as uint8_t,
    0x7 as libc::c_int as uint8_t,
    0x2d as libc::c_int as uint8_t,
    0x7 as libc::c_int as uint8_t,
    0x40 as libc::c_int as uint8_t,
    0x83 as libc::c_int as uint8_t,
    0x14 as libc::c_int as uint8_t,
    0x4c as libc::c_int as uint8_t,
    0x35 as libc::c_int as uint8_t,
    0x8d as libc::c_int as uint8_t,
    0xd0 as libc::c_int as uint8_t,
    0x11 as libc::c_int as uint8_t,
    0xff as libc::c_int as uint8_t,
    0x98 as libc::c_int as uint8_t,
    0xdb as libc::c_int as uint8_t,
    0 as libc::c_int as uint8_t,
    0x30 as libc::c_int as uint8_t,
    0x6f as libc::c_int as uint8_t,
    0x65 as libc::c_int as uint8_t,
    0xb6 as libc::c_int as uint8_t,
    0xa0 as libc::c_int as uint8_t,
    0x7f as libc::c_int as uint8_t,
    0x9c as libc::c_int as uint8_t,
    0x8 as libc::c_int as uint8_t,
    0xb8 as libc::c_int as uint8_t,
    0xce as libc::c_int as uint8_t,
    0xb3 as libc::c_int as uint8_t,
    0xa8 as libc::c_int as uint8_t,
    0x42 as libc::c_int as uint8_t,
    0xd3 as libc::c_int as uint8_t,
    0x84 as libc::c_int as uint8_t,
    0x45 as libc::c_int as uint8_t,
    0xe1 as libc::c_int as uint8_t,
    0xe3 as libc::c_int as uint8_t,
    0x8f as libc::c_int as uint8_t,
    0xa6 as libc::c_int as uint8_t,
    0x89 as libc::c_int as uint8_t,
    0x21 as libc::c_int as uint8_t,
    0xd7 as libc::c_int as uint8_t,
    0x74 as libc::c_int as uint8_t,
    0x2 as libc::c_int as uint8_t,
    0x4d as libc::c_int as uint8_t,
    0x64 as libc::c_int as uint8_t,
    0xdf as libc::c_int as uint8_t,
    0x54 as libc::c_int as uint8_t,
    0x15 as libc::c_int as uint8_t,
    0x9e as libc::c_int as uint8_t,
    0xba as libc::c_int as uint8_t,
    0x12 as libc::c_int as uint8_t,
    0x49 as libc::c_int as uint8_t,
    0x9 as libc::c_int as uint8_t,
    0x41 as libc::c_int as uint8_t,
    0xf6 as libc::c_int as uint8_t,
    0x10 as libc::c_int as uint8_t,
    0x24 as libc::c_int as uint8_t,
    0xa1 as libc::c_int as uint8_t,
    0x84 as libc::c_int as uint8_t,
    0x15 as libc::c_int as uint8_t,
    0xfd as libc::c_int as uint8_t,
    0x68 as libc::c_int as uint8_t,
    0x6a as libc::c_int as uint8_t,
    0x57 as libc::c_int as uint8_t,
    0x66 as libc::c_int as uint8_t,
    0xb3 as libc::c_int as uint8_t,
    0x6d as libc::c_int as uint8_t,
    0x4c as libc::c_int as uint8_t,
    0xea as libc::c_int as uint8_t,
    0xbf as libc::c_int as uint8_t,
    0xbc as libc::c_int as uint8_t,
    0x60 as libc::c_int as uint8_t,
    0x3f as libc::c_int as uint8_t,
    0x52 as libc::c_int as uint8_t,
    0x1c as libc::c_int as uint8_t,
    0x44 as libc::c_int as uint8_t,
    0x1b as libc::c_int as uint8_t,
    0xc0 as libc::c_int as uint8_t,
    0x4a as libc::c_int as uint8_t,
    0x25 as libc::c_int as uint8_t,
    0xe3 as libc::c_int as uint8_t,
    0xd9 as libc::c_int as uint8_t,
    0x4c as libc::c_int as uint8_t,
    0x9a as libc::c_int as uint8_t,
    0x74 as libc::c_int as uint8_t,
    0xad as libc::c_int as uint8_t,
    0xfc as libc::c_int as uint8_t,
    0x9e as libc::c_int as uint8_t,
    0x8d as libc::c_int as uint8_t,
    0xb as libc::c_int as uint8_t,
    0x18 as libc::c_int as uint8_t,
    0x66 as libc::c_int as uint8_t,
    0x24 as libc::c_int as uint8_t,
    0xd1 as libc::c_int as uint8_t,
    0x6 as libc::c_int as uint8_t,
    0xac as libc::c_int as uint8_t,
    0x68 as libc::c_int as uint8_t,
    0xc1 as libc::c_int as uint8_t,
    0xae as libc::c_int as uint8_t,
    0x14 as libc::c_int as uint8_t,
    0xce as libc::c_int as uint8_t,
    0xb1 as libc::c_int as uint8_t,
    0xf3 as libc::c_int as uint8_t,
    0x86 as libc::c_int as uint8_t,
    0x9f as libc::c_int as uint8_t,
    0x87 as libc::c_int as uint8_t,
    0x11 as libc::c_int as uint8_t,
    0xd7 as libc::c_int as uint8_t,
    0x9f as libc::c_int as uint8_t,
    0x30 as libc::c_int as uint8_t,
    0x92 as libc::c_int as uint8_t,
    0xdb as libc::c_int as uint8_t,
    0xec as libc::c_int as uint8_t,
    0xb as libc::c_int as uint8_t,
    0x4a as libc::c_int as uint8_t,
    0xe8 as libc::c_int as uint8_t,
    0xf6 as libc::c_int as uint8_t,
    0x53 as libc::c_int as uint8_t,
    0x36 as libc::c_int as uint8_t,
    0x68 as libc::c_int as uint8_t,
    0x12 as libc::c_int as uint8_t,
    0x11 as libc::c_int as uint8_t,
    0x5e as libc::c_int as uint8_t,
    0xe0 as libc::c_int as uint8_t,
    0x34 as libc::c_int as uint8_t,
    0xa4 as libc::c_int as uint8_t,
    0xff as libc::c_int as uint8_t,
    0 as libc::c_int as uint8_t,
    0xa as libc::c_int as uint8_t,
    0x26 as libc::c_int as uint8_t,
    0xb8 as libc::c_int as uint8_t,
    0x62 as libc::c_int as uint8_t,
    0x79 as libc::c_int as uint8_t,
    0x9c as libc::c_int as uint8_t,
    0xc as libc::c_int as uint8_t,
    0xd5 as libc::c_int as uint8_t,
    0xe5 as libc::c_int as uint8_t,
    0xf5 as libc::c_int as uint8_t,
    0x1c as libc::c_int as uint8_t,
    0x1a as libc::c_int as uint8_t,
    0x16 as libc::c_int as uint8_t,
    0x84 as libc::c_int as uint8_t,
    0x4d as libc::c_int as uint8_t,
    0x8e as libc::c_int as uint8_t,
    0x5d as libc::c_int as uint8_t,
    0x31 as libc::c_int as uint8_t,
    0x7e as libc::c_int as uint8_t,
    0xf7 as libc::c_int as uint8_t,
    0xe2 as libc::c_int as uint8_t,
    0xd3 as libc::c_int as uint8_t,
    0xa1 as libc::c_int as uint8_t,
    0x41 as libc::c_int as uint8_t,
    0x90 as libc::c_int as uint8_t,
    0x61 as libc::c_int as uint8_t,
    0x5d as libc::c_int as uint8_t,
    0x4 as libc::c_int as uint8_t,
    0xb2 as libc::c_int as uint8_t,
    0x9a as libc::c_int as uint8_t,
    0x18 as libc::c_int as uint8_t,
    0x9e as libc::c_int as uint8_t,
    0x54 as libc::c_int as uint8_t,
    0xfb as libc::c_int as uint8_t,
    0xd1 as libc::c_int as uint8_t,
    0x61 as libc::c_int as uint8_t,
    0x95 as libc::c_int as uint8_t,
    0x1b as libc::c_int as uint8_t,
    0x8 as libc::c_int as uint8_t,
    0xca as libc::c_int as uint8_t,
    0x7c as libc::c_int as uint8_t,
    0x49 as libc::c_int as uint8_t,
    0x44 as libc::c_int as uint8_t,
    0x74 as libc::c_int as uint8_t,
    0x1d as libc::c_int as uint8_t,
    0x2f as libc::c_int as uint8_t,
    0xca as libc::c_int as uint8_t,
    0xc4 as libc::c_int as uint8_t,
    0x7a as libc::c_int as uint8_t,
    0xe1 as libc::c_int as uint8_t,
    0x8b as libc::c_int as uint8_t,
    0x2f as libc::c_int as uint8_t,
    0xbb as libc::c_int as uint8_t,
    0x96 as libc::c_int as uint8_t,
    0xee as libc::c_int as uint8_t,
    0x19 as libc::c_int as uint8_t,
    0x8a as libc::c_int as uint8_t,
    0x5d as libc::c_int as uint8_t,
    0xfb as libc::c_int as uint8_t,
    0x3e as libc::c_int as uint8_t,
    0x82 as libc::c_int as uint8_t,
    0xe7 as libc::c_int as uint8_t,
    0x15 as libc::c_int as uint8_t,
    0xdb as libc::c_int as uint8_t,
    0x29 as libc::c_int as uint8_t,
    0x14 as libc::c_int as uint8_t,
    0xee as libc::c_int as uint8_t,
    0xc9 as libc::c_int as uint8_t,
    0x4d as libc::c_int as uint8_t,
    0x9a as libc::c_int as uint8_t,
    0xfb as libc::c_int as uint8_t,
    0x9f as libc::c_int as uint8_t,
    0x8a as libc::c_int as uint8_t,
    0xbb as libc::c_int as uint8_t,
    0x17 as libc::c_int as uint8_t,
    0x37 as libc::c_int as uint8_t,
    0x1b as libc::c_int as uint8_t,
    0x6e as libc::c_int as uint8_t,
    0x28 as libc::c_int as uint8_t,
    0x6c as libc::c_int as uint8_t,
    0xf9 as libc::c_int as uint8_t,
    0xff as libc::c_int as uint8_t,
    0xb5 as libc::c_int as uint8_t,
    0xb5 as libc::c_int as uint8_t,
    0x8b as libc::c_int as uint8_t,
    0x9d as libc::c_int as uint8_t,
    0x88 as libc::c_int as uint8_t,
    0x20 as libc::c_int as uint8_t,
    0x8 as libc::c_int as uint8_t,
    0x10 as libc::c_int as uint8_t,
    0xd7 as libc::c_int as uint8_t,
    0xca as libc::c_int as uint8_t,
    0x58 as libc::c_int as uint8_t,
    0xf6 as libc::c_int as uint8_t,
    0xe1 as libc::c_int as uint8_t,
    0x32 as libc::c_int as uint8_t,
    0x91 as libc::c_int as uint8_t,
    0x6f as libc::c_int as uint8_t,
    0x36 as libc::c_int as uint8_t,
    0xc0 as libc::c_int as uint8_t,
    0xad as libc::c_int as uint8_t,
    0xc1 as libc::c_int as uint8_t,
    0x57 as libc::c_int as uint8_t,
    0x5d as libc::c_int as uint8_t,
    0x76 as libc::c_int as uint8_t,
    0x31 as libc::c_int as uint8_t,
    0x43 as libc::c_int as uint8_t,
    0xf3 as libc::c_int as uint8_t,
    0xdd as libc::c_int as uint8_t,
    0xec as libc::c_int as uint8_t,
    0xf1 as libc::c_int as uint8_t,
    0xa9 as libc::c_int as uint8_t,
    0x79 as libc::c_int as uint8_t,
    0xe9 as libc::c_int as uint8_t,
    0xe9 as libc::c_int as uint8_t,
    0x85 as libc::c_int as uint8_t,
    0xd7 as libc::c_int as uint8_t,
    0x91 as libc::c_int as uint8_t,
    0xc7 as libc::c_int as uint8_t,
    0x31 as libc::c_int as uint8_t,
    0x62 as libc::c_int as uint8_t,
    0x3c as libc::c_int as uint8_t,
    0xd2 as libc::c_int as uint8_t,
    0x90 as libc::c_int as uint8_t,
    0x2c as libc::c_int as uint8_t,
    0x9c as libc::c_int as uint8_t,
    0xa4 as libc::c_int as uint8_t,
    0x56 as libc::c_int as uint8_t,
    0x37 as libc::c_int as uint8_t,
    0x7b as libc::c_int as uint8_t,
    0xbe as libc::c_int as uint8_t,
    0x40 as libc::c_int as uint8_t,
    0x58 as libc::c_int as uint8_t,
    0xc0 as libc::c_int as uint8_t,
    0x81 as libc::c_int as uint8_t,
    0x83 as libc::c_int as uint8_t,
    0x22 as libc::c_int as uint8_t,
    0xe8 as libc::c_int as uint8_t,
    0x13 as libc::c_int as uint8_t,
    0x79 as libc::c_int as uint8_t,
    0x18 as libc::c_int as uint8_t,
    0xdb as libc::c_int as uint8_t,
    0x3a as libc::c_int as uint8_t,
    0x1b as libc::c_int as uint8_t,
    0x31 as libc::c_int as uint8_t,
    0xd as libc::c_int as uint8_t,
    0 as libc::c_int as uint8_t,
    0x6c as libc::c_int as uint8_t,
    0x22 as libc::c_int as uint8_t,
    0x62 as libc::c_int as uint8_t,
    0x75 as libc::c_int as uint8_t,
    0x70 as libc::c_int as uint8_t,
    0xd8 as libc::c_int as uint8_t,
    0x96 as libc::c_int as uint8_t,
    0x59 as libc::c_int as uint8_t,
    0x99 as libc::c_int as uint8_t,
    0x44 as libc::c_int as uint8_t,
    0x79 as libc::c_int as uint8_t,
    0x71 as libc::c_int as uint8_t,
    0xa6 as libc::c_int as uint8_t,
    0x76 as libc::c_int as uint8_t,
    0x81 as libc::c_int as uint8_t,
    0x28 as libc::c_int as uint8_t,
    0xb2 as libc::c_int as uint8_t,
    0x65 as libc::c_int as uint8_t,
    0xe8 as libc::c_int as uint8_t,
    0x47 as libc::c_int as uint8_t,
    0x14 as libc::c_int as uint8_t,
    0xc6 as libc::c_int as uint8_t,
    0x39 as libc::c_int as uint8_t,
    0x6 as libc::c_int as uint8_t,
];
#[no_mangle]
pub unsafe extern "C" fn SPAKE2_CTX_new(
    mut my_role: spake2_role_t,
    mut my_name: *const uint8_t,
    mut my_name_len: size_t,
    mut their_name: *const uint8_t,
    mut their_name_len: size_t,
) -> *mut SPAKE2_CTX {
    let mut ctx: *mut SPAKE2_CTX = OPENSSL_zalloc(
        ::core::mem::size_of::<SPAKE2_CTX>() as libc::c_ulong,
    ) as *mut SPAKE2_CTX;
    if ctx.is_null() {
        return 0 as *mut SPAKE2_CTX;
    }
    (*ctx).my_role = my_role;
    let mut my_name_cbs: CBS = cbs_st {
        data: 0 as *const uint8_t,
        len: 0,
    };
    let mut their_name_cbs: CBS = cbs_st {
        data: 0 as *const uint8_t,
        len: 0,
    };
    CBS_init(&mut my_name_cbs, my_name, my_name_len);
    CBS_init(&mut their_name_cbs, their_name, their_name_len);
    if CBS_stow(&mut my_name_cbs, &mut (*ctx).my_name, &mut (*ctx).my_name_len) == 0
        || CBS_stow(
            &mut their_name_cbs,
            &mut (*ctx).their_name,
            &mut (*ctx).their_name_len,
        ) == 0
    {
        SPAKE2_CTX_free(ctx);
        return 0 as *mut SPAKE2_CTX;
    }
    return ctx;
}
#[no_mangle]
pub unsafe extern "C" fn SPAKE2_CTX_free(mut ctx: *mut SPAKE2_CTX) {
    if ctx.is_null() {
        return;
    }
    OPENSSL_free((*ctx).my_name as *mut libc::c_void);
    OPENSSL_free((*ctx).their_name as *mut libc::c_void);
    OPENSSL_free(ctx as *mut libc::c_void);
}
unsafe extern "C" fn left_shift_3(mut n: *mut uint8_t) {
    let mut carry: uint8_t = 0 as libc::c_int as uint8_t;
    let mut i: libc::c_uint = 0;
    i = 0 as libc::c_int as libc::c_uint;
    while i < 32 as libc::c_int as libc::c_uint {
        let next_carry: uint8_t = (*n.offset(i as isize) as libc::c_int
            >> 5 as libc::c_int) as uint8_t;
        *n
            .offset(
                i as isize,
            ) = ((*n.offset(i as isize) as libc::c_int) << 3 as libc::c_int
            | carry as libc::c_int) as uint8_t;
        carry = next_carry;
        i = i.wrapping_add(1);
        i;
    }
}
static mut kOrder: scalar = {
    let mut init = scalar {
        words: [
            (0x5812631a as libc::c_int as BN_ULONG) << 32 as libc::c_int
                | 0x5cf5d3ed as libc::c_int as BN_ULONG,
            (0x14def9de as libc::c_int as BN_ULONG) << 32 as libc::c_int
                | 0xa2f79cd6 as libc::c_uint as BN_ULONG,
            (0 as libc::c_int as BN_ULONG) << 32 as libc::c_int
                | 0 as libc::c_int as BN_ULONG,
            (0x10000000 as libc::c_int as BN_ULONG) << 32 as libc::c_int
                | 0 as libc::c_int as BN_ULONG,
        ],
    };
    init
};
unsafe extern "C" fn scalar_cmov(
    mut dest: *mut scalar,
    mut src: *const scalar,
    mut mask: crypto_word_t,
) {
    bn_select_words(
        ((*dest).words).as_mut_ptr(),
        mask,
        ((*src).words).as_ptr(),
        ((*dest).words).as_mut_ptr(),
        (::core::mem::size_of::<[BN_ULONG; 4]>() as libc::c_ulong)
            .wrapping_div(::core::mem::size_of::<BN_ULONG>() as libc::c_ulong),
    );
}
unsafe extern "C" fn scalar_double(mut s: *mut scalar) {
    bn_add_words(
        ((*s).words).as_mut_ptr(),
        ((*s).words).as_mut_ptr(),
        ((*s).words).as_mut_ptr(),
        (::core::mem::size_of::<[BN_ULONG; 4]>() as libc::c_ulong)
            .wrapping_div(::core::mem::size_of::<BN_ULONG>() as libc::c_ulong),
    );
}
unsafe extern "C" fn scalar_add(mut dest: *mut scalar, mut src: *const scalar) {
    bn_add_words(
        ((*dest).words).as_mut_ptr(),
        ((*dest).words).as_mut_ptr(),
        ((*src).words).as_ptr(),
        (::core::mem::size_of::<[BN_ULONG; 4]>() as libc::c_ulong)
            .wrapping_div(::core::mem::size_of::<BN_ULONG>() as libc::c_ulong),
    );
}
#[no_mangle]
pub unsafe extern "C" fn SPAKE2_generate_msg(
    mut ctx: *mut SPAKE2_CTX,
    mut out: *mut uint8_t,
    mut out_len: *mut size_t,
    mut max_out_len: size_t,
    mut password: *const uint8_t,
    mut password_len: size_t,
) -> libc::c_int {
    if (*ctx).state as libc::c_uint != spake2_state_init as libc::c_int as libc::c_uint {
        return 0 as libc::c_int;
    }
    if max_out_len < ::core::mem::size_of::<[uint8_t; 32]>() as libc::c_ulong {
        return 0 as libc::c_int;
    }
    let mut private_tmp: [uint8_t; 64] = [0; 64];
    RAND_bytes(
        private_tmp.as_mut_ptr(),
        ::core::mem::size_of::<[uint8_t; 64]>() as libc::c_ulong,
    );
    x25519_sc_reduce(private_tmp.as_mut_ptr());
    left_shift_3(private_tmp.as_mut_ptr());
    OPENSSL_memcpy(
        ((*ctx).private_key).as_mut_ptr() as *mut libc::c_void,
        private_tmp.as_mut_ptr() as *const libc::c_void,
        ::core::mem::size_of::<[uint8_t; 32]>() as libc::c_ulong,
    );
    let mut P: ge_p3 = ge_p3 {
        X: fe { v: [0; 5] },
        Y: fe { v: [0; 5] },
        Z: fe { v: [0; 5] },
        T: fe { v: [0; 5] },
    };
    x25519_ge_scalarmult_base(
        &mut P,
        ((*ctx).private_key).as_mut_ptr() as *const uint8_t,
    );
    let mut password_tmp: [uint8_t; 64] = [0; 64];
    SHA512(password, password_len, password_tmp.as_mut_ptr());
    OPENSSL_memcpy(
        ((*ctx).password_hash).as_mut_ptr() as *mut libc::c_void,
        password_tmp.as_mut_ptr() as *const libc::c_void,
        ::core::mem::size_of::<[uint8_t; 64]>() as libc::c_ulong,
    );
    x25519_sc_reduce(password_tmp.as_mut_ptr());
    let mut password_scalar: scalar = scalar { words: [0; 4] };
    bn_little_endian_to_words(
        (password_scalar.words).as_mut_ptr(),
        (::core::mem::size_of::<scalar>() as libc::c_ulong)
            .wrapping_div(8 as libc::c_int as libc::c_ulong),
        password_tmp.as_mut_ptr(),
        ::core::mem::size_of::<scalar>() as libc::c_ulong,
    );
    if (*ctx).disable_password_scalar_hack == 0 {
        let mut order: scalar = kOrder;
        let mut tmp: scalar = scalar { words: [0; 4] };
        OPENSSL_memset(
            &mut tmp as *mut scalar as *mut libc::c_void,
            0 as libc::c_int,
            ::core::mem::size_of::<scalar>() as libc::c_ulong,
        );
        scalar_cmov(
            &mut tmp,
            &mut order,
            constant_time_eq_w(
                password_scalar.words[0 as libc::c_int as usize]
                    & 1 as libc::c_int as BN_ULONG,
                1 as libc::c_int as crypto_word_t,
            ),
        );
        scalar_add(&mut password_scalar, &mut tmp);
        scalar_double(&mut order);
        OPENSSL_memset(
            &mut tmp as *mut scalar as *mut libc::c_void,
            0 as libc::c_int,
            ::core::mem::size_of::<scalar>() as libc::c_ulong,
        );
        scalar_cmov(
            &mut tmp,
            &mut order,
            constant_time_eq_w(
                password_scalar.words[0 as libc::c_int as usize]
                    & 2 as libc::c_int as BN_ULONG,
                2 as libc::c_int as crypto_word_t,
            ),
        );
        scalar_add(&mut password_scalar, &mut tmp);
        scalar_double(&mut order);
        OPENSSL_memset(
            &mut tmp as *mut scalar as *mut libc::c_void,
            0 as libc::c_int,
            ::core::mem::size_of::<scalar>() as libc::c_ulong,
        );
        scalar_cmov(
            &mut tmp,
            &mut order,
            constant_time_eq_w(
                password_scalar.words[0 as libc::c_int as usize]
                    & 4 as libc::c_int as BN_ULONG,
                4 as libc::c_int as crypto_word_t,
            ),
        );
        scalar_add(&mut password_scalar, &mut tmp);
        if password_scalar.words[0 as libc::c_int as usize]
            & 7 as libc::c_int as BN_ULONG == 0 as libc::c_int as BN_ULONG
        {} else {
            __assert_fail(
                b"(password_scalar.words[0] & 7) == 0\0" as *const u8
                    as *const libc::c_char,
                b"/home/ubuntu/workspace/oss/aws-lc/crypto/spake25519/spake25519.c\0"
                    as *const u8 as *const libc::c_char,
                416 as libc::c_int as libc::c_uint,
                (*::core::mem::transmute::<
                    &[u8; 92],
                    &[libc::c_char; 92],
                >(
                    b"int SPAKE2_generate_msg(SPAKE2_CTX *, uint8_t *, size_t *, size_t, const uint8_t *, size_t)\0",
                ))
                    .as_ptr(),
            );
        }
        'c_5766: {
            if password_scalar.words[0 as libc::c_int as usize]
                & 7 as libc::c_int as BN_ULONG == 0 as libc::c_int as BN_ULONG
            {} else {
                __assert_fail(
                    b"(password_scalar.words[0] & 7) == 0\0" as *const u8
                        as *const libc::c_char,
                    b"/home/ubuntu/workspace/oss/aws-lc/crypto/spake25519/spake25519.c\0"
                        as *const u8 as *const libc::c_char,
                    416 as libc::c_int as libc::c_uint,
                    (*::core::mem::transmute::<
                        &[u8; 92],
                        &[libc::c_char; 92],
                    >(
                        b"int SPAKE2_generate_msg(SPAKE2_CTX *, uint8_t *, size_t *, size_t, const uint8_t *, size_t)\0",
                    ))
                        .as_ptr(),
                );
            }
        };
    }
    bn_words_to_little_endian(
        ((*ctx).password_scalar).as_mut_ptr(),
        ::core::mem::size_of::<[uint8_t; 32]>() as libc::c_ulong,
        (password_scalar.words).as_mut_ptr(),
        (::core::mem::size_of::<scalar>() as libc::c_ulong)
            .wrapping_div(8 as libc::c_int as libc::c_ulong),
    );
    let mut mask: ge_p3 = ge_p3 {
        X: fe { v: [0; 5] },
        Y: fe { v: [0; 5] },
        Z: fe { v: [0; 5] },
        T: fe { v: [0; 5] },
    };
    x25519_ge_scalarmult_small_precomp(
        &mut mask,
        ((*ctx).password_scalar).as_mut_ptr() as *const uint8_t,
        if (*ctx).my_role as libc::c_uint
            == spake2_role_alice as libc::c_int as libc::c_uint
        {
            kSpakeMSmallPrecomp.as_ptr()
        } else {
            kSpakeNSmallPrecomp.as_ptr()
        },
    );
    let mut mask_cached: ge_cached = ge_cached {
        YplusX: fe_loose { v: [0; 5] },
        YminusX: fe_loose { v: [0; 5] },
        Z: fe_loose { v: [0; 5] },
        T2d: fe_loose { v: [0; 5] },
    };
    x25519_ge_p3_to_cached(&mut mask_cached, &mut mask);
    let mut Pstar: ge_p1p1 = ge_p1p1 {
        X: fe_loose { v: [0; 5] },
        Y: fe_loose { v: [0; 5] },
        Z: fe_loose { v: [0; 5] },
        T: fe_loose { v: [0; 5] },
    };
    x25519_ge_add(&mut Pstar, &mut P, &mut mask_cached);
    let mut Pstar_proj: ge_p2 = ge_p2 {
        X: fe { v: [0; 5] },
        Y: fe { v: [0; 5] },
        Z: fe { v: [0; 5] },
    };
    x25519_ge_p1p1_to_p2(&mut Pstar_proj, &mut Pstar);
    x25519_ge_tobytes(((*ctx).my_msg).as_mut_ptr(), &mut Pstar_proj);
    OPENSSL_memcpy(
        out as *mut libc::c_void,
        ((*ctx).my_msg).as_mut_ptr() as *const libc::c_void,
        ::core::mem::size_of::<[uint8_t; 32]>() as libc::c_ulong,
    );
    *out_len = ::core::mem::size_of::<[uint8_t; 32]>() as libc::c_ulong;
    (*ctx).state = spake2_state_msg_generated;
    OPENSSL_cleanse(
        private_tmp.as_mut_ptr() as *mut libc::c_void,
        64 as libc::c_int as size_t,
    );
    return 1 as libc::c_int;
}
unsafe extern "C" fn update_with_length_prefix(
    mut sha: *mut SHA512_CTX,
    mut data: *const uint8_t,
    len: size_t,
) {
    let mut len_le: [uint8_t; 8] = [0; 8];
    let mut l: size_t = len;
    let mut i: libc::c_uint = 0;
    i = 0 as libc::c_int as libc::c_uint;
    while i < 8 as libc::c_int as libc::c_uint {
        len_le[i as usize] = (l & 0xff as libc::c_int as size_t) as uint8_t;
        l >>= 8 as libc::c_int;
        i = i.wrapping_add(1);
        i;
    }
    SHA512_Update(
        sha,
        len_le.as_mut_ptr() as *const libc::c_void,
        ::core::mem::size_of::<[uint8_t; 8]>() as libc::c_ulong,
    );
    SHA512_Update(sha, data as *const libc::c_void, len);
}
#[no_mangle]
pub unsafe extern "C" fn SPAKE2_process_msg(
    mut ctx: *mut SPAKE2_CTX,
    mut out_key: *mut uint8_t,
    mut out_key_len: *mut size_t,
    mut max_out_key_len: size_t,
    mut their_msg: *const uint8_t,
    mut their_msg_len: size_t,
) -> libc::c_int {
    if (*ctx).state as libc::c_uint
        != spake2_state_msg_generated as libc::c_int as libc::c_uint
        || their_msg_len != 32 as libc::c_int as size_t
    {
        return 0 as libc::c_int;
    }
    let mut Qstar: ge_p3 = ge_p3 {
        X: fe { v: [0; 5] },
        Y: fe { v: [0; 5] },
        Z: fe { v: [0; 5] },
        T: fe { v: [0; 5] },
    };
    if x25519_ge_frombytes_vartime(&mut Qstar, their_msg) == 0 {
        return 0 as libc::c_int;
    }
    let mut peers_mask: ge_p3 = ge_p3 {
        X: fe { v: [0; 5] },
        Y: fe { v: [0; 5] },
        Z: fe { v: [0; 5] },
        T: fe { v: [0; 5] },
    };
    x25519_ge_scalarmult_small_precomp(
        &mut peers_mask,
        ((*ctx).password_scalar).as_mut_ptr() as *const uint8_t,
        if (*ctx).my_role as libc::c_uint
            == spake2_role_alice as libc::c_int as libc::c_uint
        {
            kSpakeNSmallPrecomp.as_ptr()
        } else {
            kSpakeMSmallPrecomp.as_ptr()
        },
    );
    let mut peers_mask_cached: ge_cached = ge_cached {
        YplusX: fe_loose { v: [0; 5] },
        YminusX: fe_loose { v: [0; 5] },
        Z: fe_loose { v: [0; 5] },
        T2d: fe_loose { v: [0; 5] },
    };
    x25519_ge_p3_to_cached(&mut peers_mask_cached, &mut peers_mask);
    let mut Q_compl: ge_p1p1 = ge_p1p1 {
        X: fe_loose { v: [0; 5] },
        Y: fe_loose { v: [0; 5] },
        Z: fe_loose { v: [0; 5] },
        T: fe_loose { v: [0; 5] },
    };
    let mut Q_ext: ge_p3 = ge_p3 {
        X: fe { v: [0; 5] },
        Y: fe { v: [0; 5] },
        Z: fe { v: [0; 5] },
        T: fe { v: [0; 5] },
    };
    x25519_ge_sub(&mut Q_compl, &mut Qstar, &mut peers_mask_cached);
    x25519_ge_p1p1_to_p3(&mut Q_ext, &mut Q_compl);
    let mut dh_shared: ge_p2 = ge_p2 {
        X: fe { v: [0; 5] },
        Y: fe { v: [0; 5] },
        Z: fe { v: [0; 5] },
    };
    x25519_ge_scalarmult(&mut dh_shared, ((*ctx).private_key).as_mut_ptr(), &mut Q_ext);
    let mut dh_shared_encoded: [uint8_t; 32] = [0; 32];
    x25519_ge_tobytes(dh_shared_encoded.as_mut_ptr(), &mut dh_shared);
    let mut sha: SHA512_CTX = sha512_state_st {
        h: [0; 8],
        Nl: 0,
        Nh: 0,
        p: [0; 128],
        num: 0,
        md_len: 0,
    };
    SHA512_Init(&mut sha);
    if (*ctx).my_role as libc::c_uint == spake2_role_alice as libc::c_int as libc::c_uint
    {
        update_with_length_prefix(&mut sha, (*ctx).my_name, (*ctx).my_name_len);
        update_with_length_prefix(&mut sha, (*ctx).their_name, (*ctx).their_name_len);
        update_with_length_prefix(
            &mut sha,
            ((*ctx).my_msg).as_mut_ptr(),
            ::core::mem::size_of::<[uint8_t; 32]>() as libc::c_ulong,
        );
        update_with_length_prefix(&mut sha, their_msg, 32 as libc::c_int as size_t);
    } else {
        update_with_length_prefix(&mut sha, (*ctx).their_name, (*ctx).their_name_len);
        update_with_length_prefix(&mut sha, (*ctx).my_name, (*ctx).my_name_len);
        update_with_length_prefix(&mut sha, their_msg, 32 as libc::c_int as size_t);
        update_with_length_prefix(
            &mut sha,
            ((*ctx).my_msg).as_mut_ptr(),
            ::core::mem::size_of::<[uint8_t; 32]>() as libc::c_ulong,
        );
    }
    update_with_length_prefix(
        &mut sha,
        dh_shared_encoded.as_mut_ptr(),
        ::core::mem::size_of::<[uint8_t; 32]>() as libc::c_ulong,
    );
    update_with_length_prefix(
        &mut sha,
        ((*ctx).password_hash).as_mut_ptr(),
        ::core::mem::size_of::<[uint8_t; 64]>() as libc::c_ulong,
    );
    let mut key: [uint8_t; 64] = [0; 64];
    SHA512_Final(key.as_mut_ptr(), &mut sha);
    let mut to_copy: size_t = max_out_key_len;
    if to_copy > ::core::mem::size_of::<[uint8_t; 64]>() as libc::c_ulong {
        to_copy = ::core::mem::size_of::<[uint8_t; 64]>() as libc::c_ulong;
    }
    OPENSSL_memcpy(
        out_key as *mut libc::c_void,
        key.as_mut_ptr() as *const libc::c_void,
        to_copy,
    );
    *out_key_len = to_copy;
    (*ctx).state = spake2_state_key_generated;
    return 1 as libc::c_int;
}
